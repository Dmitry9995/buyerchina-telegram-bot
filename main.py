#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
import json
from flask import Flask, request, jsonify
import requests
import time
import mimetypes
from urllib.parse import urlparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN not found!")
    exit(1)

BOT_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"
logger.info(f"Bot initialized: {BOT_TOKEN[:10]}...")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
MANAGER_CHAT_ID = int(os.getenv('MANAGER_CHAT_ID', '1169659218'))
logger.info(f"Manager chat ID: {MANAGER_CHAT_ID}")

def get_file_info(file_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ"""
    try:
        url = f"{BOT_URL}/getFile"
        data = {'file_id': file_id}
        response = requests.post(url, json=data, timeout=15)
        result = response.json()
        
        if result.get('ok'):
            return result['result']
        else:
            logger.error(f"Failed to get file info: {result}")
            return None
    except Exception as e:
        logger.error(f"Get file info error: {e}")
        return None

def download_file(file_path):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram"""
    try:
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"
        response = requests.get(file_url, timeout=30)
        
        if response.status_code == 200:
            return response.content
        else:
            logger.error(f"Failed to download file: {response.status_code}")
            return None
    except Exception as e:
        logger.error(f"Download file error: {e}")
        return None

def get_file_type_info(file_name):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    if not file_name:
        return "unknown", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª"
    
    file_name_lower = file_name.lower()
    
    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if any(file_name_lower.endswith(ext) for ext in ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp']):
        return "photo", "üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    
    # Excel —Ñ–∞–π–ª—ã
    elif any(file_name_lower.endswith(ext) for ext in ['.xlsx', '.xls', '.xlsm']):
        return "excel", "üìä Excel —Ç–∞–±–ª–∏—Ü–∞"
    
    # PDF —Ñ–∞–π–ª—ã
    elif file_name_lower.endswith('.pdf'):
        return "pdf", "üìÑ PDF –¥–æ–∫—É–º–µ–Ω—Ç"
    
    # Word —Ñ–∞–π–ª—ã
    elif any(file_name_lower.endswith(ext) for ext in ['.docx', '.doc']):
        return "word", "üìù Word –¥–æ–∫—É–º–µ–Ω—Ç"
    
    # –î—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    elif any(file_name_lower.endswith(ext) for ext in ['.txt', '.rtf']):
        return "document", "üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"
    
    else:
        return "other", "üìé –§–∞–π–ª"

def send_message(chat_id, text, parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    try:
        url = f"{BOT_URL}/sendMessage"
        data = {
            'chat_id': int(chat_id) if str(chat_id).isdigit() else str(chat_id),
            'text': text
        }
        if parse_mode:
            data['parse_mode'] = parse_mode
        
        logger.info(f"Sending message to chat_id: {chat_id} (type: {type(chat_id)})")
        logger.info(f"Message text: {text[:100]}...")
        logger.info(f"Request data: {data}")
        
        response = requests.post(url, json=data, timeout=15)
        result = response.json()
        
        logger.info(f"Response status: {response.status_code}")
        logger.info(f"Response body: {result}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
        if not result.get('ok'):
            error_code = result.get('error_code')
            description = result.get('description', 'Unknown error')
            logger.error(f"‚ùå Telegram API Error {error_code}: {description}")
            
            if error_code == 403:
                logger.error("‚ùå Bot blocked by user or invalid permissions")
            elif error_code == 400:
                logger.error("‚ùå Bad request - check chat_id and message format")
            elif error_code == 429:
                logger.error("‚ùå Too many requests - rate limited")
        
        return result
    except requests.exceptions.Timeout:
        logger.error("‚ùå Request timeout - Telegram API not responding")
        return None
    except requests.exceptions.ConnectionError:
        logger.error("‚ùå Connection error - check internet connection")
        return None
    except Exception as e:
        logger.error(f"‚ùå Send message error: {e}")
        return None

def send_photo(chat_id, file_id, caption=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –ø–æ file_id"""
    try:
        url = f"{BOT_URL}/sendPhoto"
        data = {
            'chat_id': int(chat_id) if str(chat_id).isdigit() else str(chat_id),
            'photo': file_id
        }
        if caption:
            data['caption'] = caption
        
        logger.info(f"Sending photo to chat_id: {chat_id}, file_id: {file_id}")
        
        response = requests.post(url, json=data, timeout=15)
        result = response.json()
        
        logger.info(f"Photo send result: {result}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Send photo error: {e}")
        return None

def send_document(chat_id, file_id, caption=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ file_id"""
    try:
        url = f"{BOT_URL}/sendDocument"
        data = {
            'chat_id': int(chat_id) if str(chat_id).isdigit() else str(chat_id),
            'document': file_id
        }
        if caption:
            data['caption'] = caption
        
        logger.info(f"Sending document to chat_id: {chat_id}, file_id: {file_id}")
        
        response = requests.post(url, json=data, timeout=15)
        result = response.json()
        
        logger.info(f"Document send result: {result}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Send document error: {e}")
        return None

def is_real_order(text):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–∫–∞–∑–æ–º"""
    if not text or len(text.strip()) < 5:
        return False
    
    order_keywords = [
        '–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '–Ω–∞–π—Ç–∏', '–Ω—É–∂–Ω–æ', '—Ö–æ—á—É', '–∏—â—É', '—Ç–æ–≤–∞—Ä', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å',
        '–¥–æ—Å—Ç–∞–≤–∫–∞', '–∫–∏—Ç–∞–π', '–∞–ª–∏—ç–∫—Å–ø—Ä–µ—Å—Å', 'alibaba', 'taobao', '1688', 'dhgate',
        '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', '–≥–¥–µ –∫—É–ø–∏—Ç—å', '–∫–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å', '–ø–æ–º–æ–≥–∏—Ç–µ –Ω–∞–π—Ç–∏', '–ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏'
    ]
    
    exclude_phrases = [
        '–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '—Å–ø–∞—Å–∏–±–æ', 'thanks', 'ok', '–¥–∞', '–Ω–µ—Ç', 'yes', 'no',
        '—Ö–æ—Ä–æ—à–æ', '–ø–æ–Ω—è—Ç–Ω–æ', '—è—Å–Ω–æ', '–æ–∫', '–æ–∫–µ–π', 'okay'
    ]
    
    text_lower = text.lower().strip()
    
    if text_lower in exclude_phrases:
        return False
    
    for keyword in order_keywords:
        if keyword in text_lower:
            return True
    
    if len(text.strip()) > 20:
        return True
    
    return False

def notify_manager(user_id, username, user_name, message_type, content, file_info=None, file_id=None):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    try:
        logger.info(f"üîî Starting notification process for manager {MANAGER_CHAT_ID}")
        
        if message_type in ["photo", "document"]:
            file_type_desc = "üì∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞"
            if file_info:
                file_type, file_desc = get_file_type_info(file_info.get('file_name', ''))
                if file_type == "excel":
                    file_type_desc = "üìä Excel —Ç–∞–±–ª–∏—Ü—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏"
                elif file_type == "pdf":
                    file_type_desc = "üìÑ PDF –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–æ–≤–∞—Ä–∞–º–∏"
                elif file_type == "word":
                    file_type_desc = "üìù Word –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–æ–≤–∞—Ä–∞–º–∏"
                else:
                    file_type_desc = f"{file_desc} ({file_info.get('file_name', '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')})"
            
            notification_text = (
                f"üö® –ù–û–í–´–ô –ó–ê–ü–†–û–° - –§–ê–ô–õ\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
                f"üì± Username: @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üÜî ID: {user_id}\n\n"
                f"üìé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª {file_type_desc} –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ö–∏—Ç–∞–µ.\n\n"
                f"‚è∞ –¢–†–ï–ë–£–ï–¢–°–Ø –°–í–Ø–ó–ê–¢–¨–°–Ø –í –¢–ï–ß–ï–ù–ò–ï 15 –ú–ò–ù–£–¢!"
            )
        else:
            safe_content = content[:300] if len(content) > 300 else content
            notification_text = (
                f"üö® –ù–û–í–´–ô –ó–ê–ü–†–û–° - –¢–ï–ö–°–¢\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
                f"üì± Username: @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üÜî ID: {user_id}\n\n"
                f"üí¨ –ó–∞–ø—Ä–æ—Å: {safe_content}\n\n"
                f"‚è∞ –¢–†–ï–ë–£–ï–¢–°–Ø –°–í–Ø–ó–ê–¢–¨–°–Ø –í –¢–ï–ß–ï–ù–ò–ï 15 –ú–ò–ù–£–¢!"
            )
        
        # –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
        max_attempts = 3
        notification_sent = False
        
        for attempt in range(max_attempts):
            logger.info(f"üì§ Attempting to send notification to manager (attempt {attempt + 1}/{max_attempts})...")
            result = send_message(MANAGER_CHAT_ID, notification_text)
            
            if result and result.get('ok'):
                logger.info(f"‚úÖ Manager notification sent successfully on attempt {attempt + 1}")
                notification_sent = True
                break
            else:
                error_description = result.get('description', 'Unknown error') if result else 'No response'
                logger.warning(f"‚ö†Ô∏è Attempt {attempt + 1} failed: {error_description}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                if result and result.get('error_code') == 403:
                    logger.error("‚ùå Bot was blocked by manager! Manager needs to unblock the bot.")
                    break
                elif result and result.get('error_code') == 400:
                    logger.error("‚ùå Invalid chat_id or message format!")
                    break
                
                if attempt < max_attempts - 1:
                    time.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
        
        # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –µ—Å—Ç—å —Ñ–∞–π–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        if notification_sent and file_id and message_type in ["photo", "document"]:
            logger.info(f"üìé Sending file to manager: {file_id}")
            
            if message_type == "photo":
                file_result = send_photo(MANAGER_CHAT_ID, file_id, f"–§–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} (ID: {user_id})")
            else:
                file_result = send_document(MANAGER_CHAT_ID, file_id, f"–§–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} (ID: {user_id})")
            
            if file_result and file_result.get('ok'):
                logger.info("‚úÖ File sent to manager successfully")
            else:
                logger.error(f"‚ùå Failed to send file to manager: {file_result}")
        
        if not notification_sent:
            logger.error(f"‚ùå Failed to send notification after {max_attempts} attempts")
        
        return notification_sent
        
    except Exception as e:
        logger.error(f"‚ùå Exception in notify_manager: {e}")
        return False

def get_chat_info(chat_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    try:
        url = f"{BOT_URL}/getChat"
        data = {'chat_id': str(chat_id)}
        response = requests.post(url, json=data, timeout=10)
        result = response.json()
        logger.info(f"Chat info for {chat_id}: {result}")
        return result
    except Exception as e:
        logger.error(f"Get chat info error: {e}")
        return None

def get_bot_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
    try:
        url = f"{BOT_URL}/getMe"
        response = requests.get(url, timeout=10)
        return response.json()
    except Exception as e:
        logger.error(f"Get bot info error: {e}")
        return None

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
    try:
        railway_url = os.getenv('RAILWAY_PUBLIC_DOMAIN') or os.getenv('RAILWAY_STATIC_URL')
        
        if railway_url:
            if not railway_url.startswith('http'):
                webhook_url = f"https://{railway_url}/webhook"
            else:
                webhook_url = f"{railway_url}/webhook"
        else:
            webhook_url = "https://web-production-ea35.up.railway.app/webhook"
            logger.warning(f"Using fallback webhook URL: {webhook_url}")
        
        logger.info(f"Setting webhook to: {webhook_url}")
        
        delete_url = f"{BOT_URL}/deleteWebhook"
        requests.post(delete_url, timeout=10)
        
        set_url = f"{BOT_URL}/setWebhook"
        data = {'url': webhook_url}
        response = requests.post(set_url, json=data, timeout=15)
        result = response.json()
        
        logger.info(f"Webhook setup result: {result}")
        return result.get('ok', False)
        
    except Exception as e:
        logger.error(f"Webhook setup error: {e}")
        return False

@app.route('/')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞"""
    bot_info = get_bot_info()
    return jsonify({
        "status": "running",
        "bot": bot_info.get('result', {}).get('username', 'unknown') if bot_info else 'error',
        "manager_id": MANAGER_CHAT_ID,
        "message": "BuyerChina Bot is running!"
    }), 200

def check_manager_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat_info = get_chat_info(MANAGER_CHAT_ID)
        if not chat_info or not chat_info.get('ok'):
            return False, "Chat info unavailable"
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_message = f"üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ - {time.strftime('%H:%M:%S')}"
        result = send_message(MANAGER_CHAT_ID, test_message)
        
        if result and result.get('ok'):
            return True, "Manager available"
        else:
            error_code = result.get('error_code') if result else 'No response'
            description = result.get('description') if result else 'Unknown error'
            return False, f"Error {error_code}: {description}"
            
    except Exception as e:
        return False, f"Exception: {str(e)}"

@app.route('/debug_manager')
def debug_manager():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        results = {}
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        logger.info(f"üîç Checking manager status for {MANAGER_CHAT_ID}")
        manager_available, status_message = check_manager_status()
        results['manager_status'] = {
            'available': manager_available,
            'message': status_message
        }
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        logger.info(f"üîç Getting chat info for manager {MANAGER_CHAT_ID}")
        chat_info = get_chat_info(MANAGER_CHAT_ID)
        results['chat_info'] = chat_info
        
        # 3. –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info("üì§ Attempting to send test message")
        test_message = f"üß™ –¢–ï–°–¢ –°–û–ï–î–ò–ù–ï–ù–ò–Ø - {time.strftime('%H:%M:%S')}"
        send_result = send_message(MANAGER_CHAT_ID, test_message)
        results['send_test'] = send_result
        
        # 4. –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        time.sleep(1)
        logger.info("üì§ Attempting to send full notification")
        notification_result = notify_manager(
            user_id="DEBUG_123",
            username="debug_user",
            user_name="–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            message_type="text",
            content="–≠—Ç–æ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        )
        results['notification_test'] = notification_result
        
        # 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        recommendations = []
        if not manager_available:
            if 'blocked' in status_message.lower() or '403' in status_message:
                recommendations.append("–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ù—É–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤ Telegram.")
            elif '400' in status_message:
                recommendations.append("–ù–µ–≤–µ—Ä–Ω—ã–π MANAGER_CHAT_ID. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID.")
            else:
                recommendations.append("–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram API –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        
        results['recommendations'] = recommendations
        
        return jsonify({
            "manager_id": MANAGER_CHAT_ID,
            "timestamp": time.strftime('%Y-%m-%d %H:%M:%S'),
            "tests": results,
            "status": "success" if manager_available else "failed",
            "summary": f"Manager {'–¥–æ—Å—Ç—É–ø–µ–Ω' if manager_available else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}: {status_message}"
        })
        
    except Exception as e:
        logger.error(f"Debug error: {e}")
        return jsonify({"error": str(e), "status": "error"}), 500

@app.route('/find_chat_id')
def find_chat_id():
    """–ü–æ–º–æ—â—å –≤ –ø–æ–∏—Å–∫–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ chat_id"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        url = f"{BOT_URL}/getUpdates"
        response = requests.get(url, timeout=10)
        result = response.json()
        
        if result.get('ok') and result.get('result'):
            chats = []
            for update in result['result'][-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                if 'message' in update:
                    msg = update['message']
                    chat_info = {
                        'chat_id': msg['chat']['id'],
                        'chat_type': msg['chat']['type'],
                        'user_name': msg.get('from', {}).get('first_name', 'Unknown'),
                        'username': msg.get('from', {}).get('username', ''),
                        'text': msg.get('text', msg.get('caption', 'No text'))[:50]
                    }
                    chats.append(chat_info)
            
            return jsonify({
                "status": "success",
                "recent_chats": chats,
                "current_manager_id": MANAGER_CHAT_ID,
                "instructions": "–ù–∞–π–¥–∏—Ç–µ –≤–∞—à chat_id –≤ —Å–ø–∏—Å–∫–µ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é MANAGER_CHAT_ID"
            })
        else:
            return jsonify({
                "status": "no_updates",
                "message": "–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            })
            
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/test_chat_id/<chat_id>')
def test_chat_id(chat_id):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π chat_id"""
    try:
        test_message = f"üß™ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id} - {time.strftime('%H:%M:%S')}"
        result = send_message(chat_id, test_message)
        
        return jsonify({
            "chat_id": chat_id,
            "result": result,
            "success": result.get('ok', False) if result else False
        })
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/webhook_info')
def webhook_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook"""
    try:
        url = f"{BOT_URL}/getWebhookInfo"
        response = requests.get(url, timeout=10)
        return jsonify(response.json())
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/set_webhook')
def manual_webhook():
    """–†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
    try:
        if setup_webhook():
            return "‚úÖ Webhook set successfully!"
        else:
            return "‚ùå Webhook setup failed", 500
    except Exception as e:
        return f"‚ùå Error: {e}", 500

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        data = request.get_json()
        
        if not data:
            logger.error("Empty request data")
            return "No data", 400
            
        logger.info(f"üì® Received update: {json.dumps(data, ensure_ascii=False)}")
        
        if 'message' not in data:
            return "OK", 200
            
        message = data['message']
        chat_id = message['chat']['id']
        user_data = message.get('from', {})
        user_id = user_data.get('id')
        user_name = user_data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        username = user_data.get('username', '')
        
        logger.info(f"üë§ Processing message from: {user_name} (ID: {user_id}, Chat: {chat_id})")
        
        # –ö–æ–º–∞–Ω–¥–∞ /start
        if 'text' in message and message['text'] == '/start':
            welcome_text = (
                f"üá®üá≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BuyerChina, {user_name}!\n\n"
                f"–í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –≤ –ö–∏—Ç–∞–µ.\n\n"
                f"üí∞ –í–ê–ñ–ù–û: –ó–∞—è–≤–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –æ—Ç $1500 –∑–∞ –ø–∞—Ä—Ç–∏—é\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                f"üì∏ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –∏—â–µ—Ç–µ\n"
                f"üìä Excel —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏\n"
                f"üìÑ PDF –∫–∞—Ç–∞–ª–æ–≥\n"
                f"üìù Word –¥–æ–∫—É–º–µ–Ω—Ç\n\n"
                f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!"
            )
            send_message(chat_id, welcome_text)
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        elif 'photo' in message:
            logger.info(f"üì∏ Photo received from {user_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º–æ–º –±–æ–ª—å—à–æ–º —Ñ–æ—Ç–æ
            photos = message['photo']
            largest_photo = max(photos, key=lambda x: x.get('file_size', 0))
            file_id = largest_photo['file_id']
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = get_file_info(file_id)
            logger.info(f"Photo file info: {file_info}")
            
            notification_sent = notify_manager(user_id, username, user_name, "photo", "–§–æ—Ç–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞", file_info, file_id)
            
            response_text = (
                f"üì∏ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ, {user_name}!\n\n"
                f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n\n"
                f"üë®‚Äçüíº –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä {'—É–∂–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' if notification_sent else '–ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'} –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 15 –º–∏–Ω—É—Ç."
            )
            send_message(chat_id, response_text)
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        elif 'document' in message:
            document = message['document']
            file_name = document.get('file_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            file_size = document.get('file_size', 0)
            file_id = document['file_id']
            
            logger.info(f"üìé Document received from {user_name}: {file_name} ({file_size} bytes)")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            file_type, file_desc = get_file_type_info(file_name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã
            supported_types = ['excel', 'pdf', 'word', 'document']
            if file_type not in supported_types:
                response_text = (
                    f"‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, {user_name}!\n\n"
                    f"–§–∞–π–ª '{file_name}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n\n"
                    f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                    f"üìä Excel: .xlsx, .xls\n"
                    f"üìÑ PDF: .pdf\n"
                    f"üìù Word: .docx, .doc\n"
                    f"üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: .jpg, .png, .gif\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
                )
                send_message(chat_id, response_text)
                return "OK", 200
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = get_file_info(file_id)
            if file_info:
                file_info['file_name'] = file_name
                file_info['file_type'] = file_type
            
            logger.info(f"Document file info: {file_info}")
            
            notification_sent = notify_manager(user_id, username, user_name, "document", f"–î–æ–∫—É–º–µ–Ω—Ç: {file_name}", file_info, file_id)
            
            response_text = (
                f"{file_desc} –ø–æ–ª—É—á–µ–Ω, {user_name}!\n\n"
                f"üìé –§–∞–π–ª: {file_name}\n"
                f"üìè –†–∞–∑–º–µ—Ä: {file_size // 1024} –ö–ë\n\n"
                f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n\n"
                f"üë®‚Äçüíº –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä {'—É–∂–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' if notification_sent else '–ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'} –∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 15 –º–∏–Ω—É—Ç."
            )
            send_message(chat_id, response_text)
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        elif 'text' in message:
            text = message['text']
            
            if text.startswith('/'):
                return "OK", 200
            
            if is_real_order(text):
                logger.info(f"üìù Real order detected from {user_name}")
                
                notification_sent = notify_manager(user_id, username, user_name, "text", text)
                
                response_text = (
                    f"üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø—Ä–æ—Å, {user_name}!\n\n"
                    f"üí¨ –í–∞—à –∑–∞–ø—Ä–æ—Å: {text[:100]}{'...' if len(text) > 100 else ''}\n\n"
                    f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n\n"
                    f"üë®‚Äçüíº –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä {'—É–∂–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' if notification_sent else '–ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'} –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 15 –º–∏–Ω—É—Ç."
                )
                send_message(chat_id, response_text)
                
            else:
                response_text = (
                    f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
                    f"üí∞ –í–ê–ñ–ù–û: –ó–∞—è–≤–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –æ—Ç $1500 –∑–∞ –ø–∞—Ä—Ç–∏—é\n\n"
                    f"–î–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ö–∏—Ç–∞–µ:\n"
                    f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞\n"
                    f"üìù –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –∏—â–µ—Ç–µ\n"
                    f"üìä –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª\n"
                    f"üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∫–∞—Ç–∞–ª–æ–≥\n"
                    f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ Word –¥–æ–∫—É–º–µ–Ω—Ç\n\n"
                    f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    f"‚Ä¢ \"–•–æ—á—É –Ω–∞–π—Ç–∏ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏\"\n"
                    f"‚Ä¢ \"–ù—É–∂–Ω–∞ –∫—É—Ä—Ç–∫–∞ –∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ\"\n"
                    f"‚Ä¢ \"–ò—â—É —Ç–µ–ª–µ—Ñ–æ–Ω Samsung\""
                )
                send_message(chat_id, response_text)
        
        return "OK", 200
        
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}")
        return "Error", 500

if __name__ == '__main__':
    try:
        logger.info("üöÄ Starting BuyerChina Bot...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = get_bot_info()
        if bot_info and bot_info.get('ok'):
            bot_username = bot_info['result']['username']
            logger.info(f"‚úÖ Bot info: @{bot_username}")
        else:
            logger.error("‚ùå Failed to get bot info - check BOT_TOKEN")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
        try:
            if setup_webhook():
                logger.info("‚úÖ Webhook setup completed")
            else:
                logger.error("‚ùå Webhook setup failed")
        except Exception as e:
            logger.error(f"‚ùå Webhook setup error: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        port = int(os.getenv('PORT', 5000))
        logger.info(f"üåê Starting server on port {port}")
        
        app.run(host='0.0.0.0', port=port, debug=False)
        
    except Exception as e:
        logger.error(f"‚ùå Startup error: {e}")
        port = int(os.getenv('PORT', 5000))
        app.run(host='0.0.0.0', port=port, debug=False)