#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
import json
from flask import Flask, request, jsonify
import requests
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN not found!")
    exit(1)

BOT_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"
logger.info(f"Bot initialized: {BOT_TOKEN[:10]}...")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
MANAGER_CHAT_ID = os.getenv('MANAGER_CHAT_ID', '1169659218')
logger.info(f"Manager chat ID: {MANAGER_CHAT_ID}")

def send_message(chat_id, text, parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        url = f"{BOT_URL}/sendMessage"
        data = {
            'chat_id': str(chat_id),
            'text': text
        }
        if parse_mode:
            data['parse_mode'] = parse_mode
            
        response = requests.post(url, json=data, timeout=15)
        result = response.json()
        
        logger.info(f"Message sent to {chat_id}: Status {response.status_code}")
        
        if not result.get('ok'):
            logger.error(f"Telegram API error: {result}")
            
        return result
    except Exception as e:
        logger.error(f"Send message error: {e}")
        return None

def is_real_order(text):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–∫–∞–∑–æ–º"""
    if not text or len(text.strip()) < 5:
        return False
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    order_keywords = [
        '–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '–Ω–∞–π—Ç–∏', '–Ω—É–∂–Ω–æ', '—Ö–æ—á—É', '–∏—â—É', '—Ç–æ–≤–∞—Ä', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å',
        '–¥–æ—Å—Ç–∞–≤–∫–∞', '–∫–∏—Ç–∞–π', '–∞–ª–∏—ç–∫—Å–ø—Ä–µ—Å—Å', 'alibaba', 'taobao', '1688', 'dhgate',
        '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', '–≥–¥–µ –∫—É–ø–∏—Ç—å', '–∫–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å', '–ø–æ–º–æ–≥–∏—Ç–µ –Ω–∞–π—Ç–∏', '–ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏'
    ]
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ—Ä–∞–∑—ã
    exclude_phrases = [
        '–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '—Å–ø–∞—Å–∏–±–æ', 'thanks', 'ok', '–¥–∞', '–Ω–µ—Ç', 'yes', 'no',
        '—Ö–æ—Ä–æ—à–æ', '–ø–æ–Ω—è—Ç–Ω–æ', '—è—Å–Ω–æ', '–æ–∫', '–æ–∫–µ–π', 'okay'
    ]
    
    text_lower = text.lower().strip()
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞
    if text_lower in exclude_phrases:
        return False
    
    # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∑–∞–∫–∞–∑–∞
    for keyword in order_keywords:
        if keyword in text_lower:
            return True
    
    # –ï—Å–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–µ—Ä–æ—è—Ç–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞)
    if len(text.strip()) > 20:
        return True
    
    return False

def notify_manager(user_id, username, user_name, message_type, content):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    max_attempts = 3
    
    for attempt in range(max_attempts):
        try:
            logger.info(f"üîî Attempt {attempt + 1}/{max_attempts} to notify manager {MANAGER_CHAT_ID}")
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            if message_type == "photo":
                notification_text = (
                    f"üö® –ù–û–í–´–ô –ó–ê–ü–†–û–° - –§–û–¢–û\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
                    f"üì± Username: @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"üÜî ID: {user_id}\n\n"
                    f"üì∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤ –≤ –ö–∏—Ç–∞–µ.\n\n"
                    f"‚è∞ –¢–†–ï–ë–£–ï–¢–°–Ø –°–í–Ø–ó–ê–¢–¨–°–Ø –í –¢–ï–ß–ï–ù–ò–ï 15 –ú–ò–ù–£–¢!"
                )
            else:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                safe_content = content[:300] if len(content) > 300 else content
                notification_text = (
                    f"üö® –ù–û–í–´–ô –ó–ê–ü–†–û–° - –¢–ï–ö–°–¢\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
                    f"üì± Username: @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"üÜî ID: {user_id}\n\n"
                    f"üí¨ –ó–∞–ø—Ä–æ—Å: {safe_content}\n\n"
                    f"‚è∞ –¢–†–ï–ë–£–ï–¢–°–Ø –°–í–Ø–ó–ê–¢–¨–°–Ø –í –¢–ï–ß–ï–ù–ò–ï 15 –ú–ò–ù–£–¢!"
                )
            
            logger.info(f"üì§ Sending notification to manager (attempt {attempt + 1})...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            result = send_message(MANAGER_CHAT_ID, notification_text)
            
            if result and result.get('ok'):
                logger.info(f"‚úÖ Manager notification sent successfully to {MANAGER_CHAT_ID}")
                return True
            else:
                logger.error(f"‚ùå Failed to send notification (attempt {attempt + 1}): {result}")
                
                if attempt < max_attempts - 1:
                    time.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    continue
                else:
                    return False
        
        except Exception as e:
            logger.error(f"‚ùå Exception in notify_manager (attempt {attempt + 1}): {e}")
            if attempt < max_attempts - 1:
                time.sleep(1)
                continue
            else:
                return False
    
    return False

def test_manager_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
    try:
        logger.info(f"üß™ Testing connection to manager {MANAGER_CHAT_ID}")
        test_message = f"üß™ –¢–µ—Å—Ç —Å–≤—è–∑–∏ —Å –±–æ—Ç–æ–º - {time.strftime('%H:%M:%S')}\n\n–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!"
        
        result = send_message(MANAGER_CHAT_ID, test_message)
        
        if result and result.get('ok'):
            logger.info("‚úÖ Manager connection test successful")
            return True
        else:
            logger.error(f"‚ùå Manager connection test failed: {result}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Manager connection test error: {e}")
        return False

def get_bot_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
    try:
        url = f"{BOT_URL}/getMe"
        response = requests.get(url, timeout=10)
        return response.json()
    except Exception as e:
        logger.error(f"Get bot info error: {e}")
        return None

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        railway_url = os.getenv('RAILWAY_PUBLIC_DOMAIN') or os.getenv('RAILWAY_STATIC_URL')
        
        if railway_url:
            if not railway_url.startswith('http'):
                webhook_url = f"https://{railway_url}/webhook"
            else:
                webhook_url = f"{railway_url}/webhook"
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π URL
            webhook_url = "https://web-production-ea35.up.railway.app/webhook"
            logger.warning(f"Using fallback webhook URL: {webhook_url}")
        
        logger.info(f"Setting webhook to: {webhook_url}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        delete_url = f"{BOT_URL}/deleteWebhook"
        requests.post(delete_url, timeout=10)
        logger.info("Old webhook deleted")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        set_url = f"{BOT_URL}/setWebhook"
        data = {'url': webhook_url}
        response = requests.post(set_url, json=data, timeout=15)
        result = response.json()
        
        if result.get('ok'):
            logger.info(f"‚úÖ Webhook set successfully: {webhook_url}")
            return True
        else:
            logger.error(f"‚ùå Webhook setup failed: {result}")
            return False
            
    except Exception as e:
        logger.error(f"Webhook setup error: {e}")
        return False

@app.route('/')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞"""
    bot_info = get_bot_info()
    return jsonify({
        "status": "running",
        "bot": bot_info.get('result', {}).get('username', 'unknown') if bot_info else 'error',
        "manager_id": MANAGER_CHAT_ID,
        "message": "BuyerChina Bot is running!"
    }), 200

@app.route('/test_manager')
def test_manager():
    """–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        connection_test = test_manager_connection()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        notification_test = notify_manager(
            user_id="TEST_USER_123",
            username="test_user", 
            user_name="–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            message_type="text",
            content="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ï—Å–ª–∏ –≤—ã –µ–≥–æ –≤–∏–¥–∏—Ç–µ - –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!"
        )
        
        return jsonify({
            "connection_test": connection_test,
            "notification_test": notification_test,
            "manager_id": MANAGER_CHAT_ID,
            "status": "success" if (connection_test and notification_test) else "failed",
            "timestamp": time.strftime('%Y-%m-%d %H:%M:%S')
        })
        
    except Exception as e:
        logger.error(f"Test error: {e}")
        return jsonify({"error": str(e), "status": "error"}), 500

@app.route('/set_webhook')
def manual_webhook():
    """–†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
    try:
        if setup_webhook():
            return "‚úÖ Webhook set successfully!"
        else:
            return "‚ùå Webhook setup failed", 500
    except Exception as e:
        return f"‚ùå Error: {e}", 500

@app.route('/webhook_info')
def webhook_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook"""
    try:
        url = f"{BOT_URL}/getWebhookInfo"
        response = requests.get(url, timeout=10)
        return jsonify(response.json())
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/bot_info')
def bot_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    try:
        info = get_bot_info()
        return jsonify(info)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        data = request.get_json()
        
        if not data:
            logger.error("Empty request data")
            return "No data", 400
            
        logger.info(f"üì® Received update from Telegram")
        
        if 'message' not in data:
            logger.info("Update without message, skipping")
            return "OK", 200
            
        message = data['message']
        chat_id = message['chat']['id']
        user_data = message.get('from', {})
        user_id = user_data.get('id')
        user_name = user_data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        username = user_data.get('username', '')
        
        logger.info(f"üë§ Processing message from user: {user_name} (ID: {user_id})")
        
        # –ö–æ–º–∞–Ω–¥–∞ /start
        if 'text' in message and message['text'] == '/start':
            welcome_text = (
                f"üá®üá≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BuyerChina, {user_name}!\n\n"
                f"–í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –≤ –ö–∏—Ç–∞–µ.\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                f"üì∏ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –∏—â–µ—Ç–µ\n\n"
                f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!"
            )
            send_message(chat_id, welcome_text)
            logger.info(f"üìù Sent welcome message to {user_name}")
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        elif 'photo' in message:
            logger.info(f"üì∏ Photo received from {user_name}, processing...")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            notification_sent = notify_manager(user_id, username, user_name, "photo", "–§–æ—Ç–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞")
            
            if notification_sent:
                logger.info("‚úÖ Manager notified about photo")
            else:
                logger.error("‚ùå Failed to notify manager about photo")
            
            # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            response_text = (
                f"üì∏ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ, {user_name}!\n\n"
                f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n\n"
                f"üë®‚Äçüíº –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 15 –º–∏–Ω—É—Ç.\n\n"
                f"üîç –ú—ã –Ω–∞–π–¥–µ–º –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –ö–∏—Ç–∞–µ!"
            )
            send_message(chat_id, response_text)
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        elif 'text' in message:
            text = message['text']
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if text.startswith('/'):
                logger.info(f"Command received: {text}")
                return "OK", 200
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–∫–∞–∑–æ–º
            if is_real_order(text):
                logger.info(f"üìù Real order detected from {user_name}, processing...")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                notification_sent = notify_manager(user_id, username, user_name, "text", text)
                
                if notification_sent:
                    logger.info("‚úÖ Manager notified about text order")
                else:
                    logger.error("‚ùå Failed to notify manager about text order")
                
                # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                response_text = (
                    f"üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø—Ä–æ—Å, {user_name}!\n\n"
                    f"üí¨ –í–∞—à –∑–∞–ø—Ä–æ—Å: {text[:100]}{'...' if len(text) > 100 else ''}\n\n"
                    f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n\n"
                    f"üë®‚Äçüíº –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 15 –º–∏–Ω—É—Ç."
                )
                send_message(chat_id, response_text)
                
            else:
                logger.info(f"üí¨ Regular message from {user_name}, sending help")
                # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                response_text = (
                    f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
                    f"–î–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ö–∏—Ç–∞–µ:\n"
                    f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞\n"
                    f"üìù –ò–ª–∏ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –∏—â–µ—Ç–µ\n\n"
                    f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    f"‚Ä¢ \"–•–æ—á—É –Ω–∞–π—Ç–∏ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏\"\n"
                    f"‚Ä¢ \"–ù—É–∂–Ω–∞ –∫—É—Ä—Ç–∫–∞ –∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ\"\n"
                    f"‚Ä¢ \"–ò—â—É —Ç–µ–ª–µ—Ñ–æ–Ω Samsung\""
                )
                send_message(chat_id, response_text)
        
        return "OK", 200
        
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}")
        return "Error", 500

if __name__ == '__main__':
    try:
        logger.info("üöÄ Starting BuyerChina Bot...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = get_bot_info()
        if bot_info and bot_info.get('ok'):
            bot_username = bot_info['result']['username']
            logger.info(f"‚úÖ Bot info: @{bot_username}")
        else:
            logger.error("‚ùå Failed to get bot info - check BOT_TOKEN")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        logger.info("üß™ Testing manager connection on startup...")
        if test_manager_connection():
            logger.info("‚úÖ Manager connection OK")
        else:
            logger.error("‚ùå Manager connection FAILED - check MANAGER_CHAT_ID")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
        try:
            if setup_webhook():
                logger.info("‚úÖ Webhook setup completed")
            else:
                logger.error("‚ùå Webhook setup failed")
        except Exception as e:
            logger.error(f"‚ùå Webhook setup error: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        port = int(os.getenv('PORT', 5000))
        logger.info(f"üåê Starting server on port {port}")
        
        app.run(host='0.0.0.0', port=port, debug=False)
        
    except Exception as e:
        logger.error(f"‚ùå Startup error: {e}")
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        port = int(os.getenv('PORT', 5000))
        app.run(host='0.0.0.0', port=port, debug=False)