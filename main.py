#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
from flask import Flask, request
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN not found!")
    exit(1)

BOT_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"
logger.info(f"Bot initialized: {BOT_TOKEN[:10]}...")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
MANAGER_CHAT_ID = os.getenv('MANAGER_CHAT_ID', '1169659218')  # ID —á–∞—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞

def send_message(chat_id, text):
    try:
        url = f"{BOT_URL}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': text
        }
        response = requests.post(url, json=data, timeout=10)
        logger.info(f"Message sent to {chat_id}: {response.status_code}")
        return response.json()
    except Exception as e:
        logger.error(f"Send message error: {e}")
        return None

def is_real_order(text):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–∫–∞–∑–æ–º"""
    if not text or len(text.strip()) < 5:
        return False
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    order_keywords = [
        '–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '–Ω–∞–π—Ç–∏', '–Ω—É–∂–Ω–æ', '—Ö–æ—á—É', '–∏—â—É', '—Ç–æ–≤–∞—Ä', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å',
        '–¥–æ—Å—Ç–∞–≤–∫–∞', '–∫–∏—Ç–∞–π', '–∞–ª–∏—ç–∫—Å–ø—Ä–µ—Å—Å', 'alibaba', 'taobao', '1688', 'dhgate',
        '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', '–≥–¥–µ –∫—É–ø–∏—Ç—å', '–∫–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å', '–ø–æ–º–æ–≥–∏—Ç–µ –Ω–∞–π—Ç–∏'
    ]
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ—Ä–∞–∑—ã
    exclude_phrases = [
        '–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '—Å–ø–∞—Å–∏–±–æ', 'thanks', 'ok', '–¥–∞', '–Ω–µ—Ç', 'yes', 'no',
        '—Ö–æ—Ä–æ—à–æ', '–ø–æ–Ω—è—Ç–Ω–æ', '—è—Å–Ω–æ', '–æ–∫', '–æ–∫–µ–π', 'okay'
    ]
    
    text_lower = text.lower().strip()
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞
    if text_lower in exclude_phrases or len(text_lower) < 5:
        return False
    
    # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∑–∞–∫–∞–∑–∞
    for keyword in order_keywords:
        if keyword in text_lower:
            return True
    
    # –ï—Å–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–µ—Ä–æ—è—Ç–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞)
    if len(text.strip()) > 20:
        return True
    
    return False

def notify_manager(user_id, username, user_name, message_type, content):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
    try:
        logger.info(f"üîî Attempting to notify manager {MANAGER_CHAT_ID}")
        
        if message_type == "photo":
            notification_text = (
                f"üì∏ –ù–û–í–´–ô –ó–ê–ü–†–û–° - –§–û–¢–û\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (@{username if username else '–±–µ–∑ username'})\n"
                f"üÜî ID: {user_id}\n\n"
                f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤ –≤ –ö–∏—Ç–∞–µ.\n\n"
                f"‚è∞ –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!"
            )
        else:
            notification_text = (
                f"üìù –ù–û–í–´–ô –ó–ê–ü–†–û–° - –¢–ï–ö–°–¢\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (@{username if username else '–±–µ–∑ username'})\n"
                f"üÜî ID: {user_id}\n\n"
                f"üí¨ –ó–∞–ø—Ä–æ—Å: {content}\n\n"
                f"‚è∞ –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!"
            )
        
        logger.info(f"üì§ Sending notification to manager: {notification_text[:100]}...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
        try:
            url = f"{BOT_URL}/sendMessage"
            data = {
                'chat_id': str(MANAGER_CHAT_ID),
                'text': notification_text
            }
            response = requests.post(url, json=data, timeout=10)
            result = response.json()
            
            logger.info(f"üìä Manager notification response: {result}")
            
            if response.status_code == 200 and result.get('ok'):
                logger.info(f"‚úÖ Manager notification sent successfully to {MANAGER_CHAT_ID}")
                return True
            else:
                logger.error(f"‚ùå Failed to send notification: {result}")
                return False
                
        except Exception as api_error:
            logger.error(f"‚ùå API error sending to manager: {api_error}")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå Exception in notify_manager: {e}")
        return False

def setup_webhook():
    """Setup webhook for Railway"""
    try:
        railway_url = os.getenv('RAILWAY_PUBLIC_DOMAIN')
        if railway_url:
            webhook_url = f"https://{railway_url}/webhook"
        else:
            webhook_url = f"https://web-production-ea35.up.railway.app/webhook"
        
        delete_url = f"{BOT_URL}/deleteWebhook"
        requests.post(delete_url, timeout=10)
        
        set_url = f"{BOT_URL}/setWebhook"
        data = {'url': webhook_url}
        response = requests.post(set_url, json=data, timeout=10)
        result = response.json()
        
        if result.get('ok'):
            logger.info(f"‚úÖ Webhook set: {webhook_url}")
            return True
        else:
            logger.error(f"‚ùå Webhook failed: {result}")
            return False
    except Exception as e:
        logger.error(f"Webhook setup error: {e}")
        return False

@app.route('/')
def health():
    return "BuyerChina Bot is running!", 200

@app.route('/test_manager')
def test_manager():
    """–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        test_result = notify_manager(
            user_id="TEST123",
            username="testuser", 
            user_name="–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            message_type="text",
            content="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        )
        if test_result:
            return f"‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É {MANAGER_CHAT_ID}"
        else:
            return "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}"

@app.route('/set_webhook')
def manual_webhook():
    """Manual webhook setup"""
    if setup_webhook():
        return "‚úÖ Webhook set successfully!"
    else:
        return "‚ùå Webhook setup failed"

@app.route('/webhook_info')
def webhook_info():
    """Get webhook info"""
    try:
        url = f"{BOT_URL}/getWebhookInfo"
        response = requests.get(url, timeout=10)
        return response.json()
    except Exception as e:
        return {"error": str(e)}

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        data = request.get_json()
        logger.info(f"Received update: {data}")
        
        if 'message' in data:
            message = data['message']
            chat_id = message['chat']['id']
            user_data = message.get('from', {})
            user_id = user_data.get('id')
            user_name = user_data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            username = user_data.get('username', '')
            
            if 'text' in message and message['text'] == '/start':
                welcome_text = f"üá®üá≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BuyerChina, {user_name}!\n\n–í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –≤ –ö–∏—Ç–∞–µ.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤."
                send_message(chat_id, welcome_text)
                
            elif 'photo' in message:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                notify_manager(user_id, username, user_name, "photo", "–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
                
                response_text = f"üì∏ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ, {user_name}!\n\n‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n\nüë®‚Äçüíº –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 15 –º–∏–Ω—É—Ç.\n\nüîç –ú—ã –Ω–∞–π–¥–µ–º –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –ö–∏—Ç–∞–µ!"
                send_message(chat_id, response_text)
                
            elif 'text' in message:
                text = message['text']
                if text != '/start':  # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –∫–æ–º–∞–Ω–¥–µ /start
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–∫–∞–∑–æ–º
                    if is_real_order(text):
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
                        notify_manager(user_id, username, user_name, "text", text)
                        
                        response_text = f"üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø—Ä–æ—Å, {user_name}!\n\nüí¨ –í–∞—à –∑–∞–ø—Ä–æ—Å: {text}\n\n‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n\nüë®‚Äçüíº –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 15 –º–∏–Ω—É—Ç."
                        send_message(chat_id, response_text)
                    else:
                        # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        response_text = f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n–î–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ö–∏—Ç–∞–µ:\nüì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞\nüìù –ò–ª–∏ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –∏—â–µ—Ç–µ\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: \"–•–æ—á—É –Ω–∞–π—Ç–∏ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏\" –∏–ª–∏ \"–ù—É–∂–Ω–∞ –∫—É—Ä—Ç–∫–∞ –∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ\""
                        send_message(chat_id, response_text)
        
        return "OK", 200
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return "Error", 500

if __name__ == '__main__':
    try:
        logger.info("üöÄ Starting BuyerChina Bot...")
        
        # Setup webhook on startup
        try:
            setup_webhook()
            logger.info("‚úÖ Webhook setup completed")
        except Exception as e:
            logger.error(f"‚ùå Webhook setup failed: {e}")
        
        port = int(os.getenv('PORT', 5000))
        logger.info(f"Starting server on port {port}")
        app.run(host='0.0.0.0', port=port, debug=False)
    except Exception as e:
        logger.error(f"Startup error: {e}")
        # Minimal startup fallback
        port = int(os.getenv('PORT', 5000))
        app.run(host='0.0.0.0', port=port, debug=False)
