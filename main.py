#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
from flask import Flask, request, jsonify
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
telegram_app = None
bot_token = None

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await update.message.reply_text(
        "üá®üá≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BuyerChina!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞."
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    username = user.username or "Unknown"
    
    if update.message.photo:
        await update.message.reply_text(
            f"üì∏ *–ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ –æ—Ç {username}!*\n\n"
            "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...\n"
            "üá®üá≥ –ò—â—É –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –ö–∏—Ç–∞–µ...\n"
            "üí∞ –°—Ä–∞–≤–Ω–∏–≤–∞—é —Ü–µ–Ω—ã —É —Ä–∞–∑–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...\n\n"
            "*–ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:*\n"
            "üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫ 1: Guangzhou Factory - $12.50\n"
            "üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫ 2: Shenzhen Manufacturer - $11.80\n"
            "üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫ 3: Yiwu Supplier - $13.20\n\n"
            "‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: Shenzhen Manufacturer (–ª—É—á—à–∞—è —Ü–µ–Ω–∞)"
        )
    elif update.message.text:
        text = update.message.text
        response_text = (
            f"üìù *–ü–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å:* {text}\n\n"
            "üîç –ò—â—É —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...\n"
            "üí∞ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–æ...\n\n"
            "*–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:*\n"
            "üè≠ Alibaba Supplier A - $8.90 (MOQ: 100)\n"
            "üè≠ Made-in-China Supplier B - $9.50 (MOQ: 50)\n"
            "üè≠ DHgate Supplier C - $12.00 (MOQ: 1)\n\n"
            "‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: Supplier A (–ª—É—á—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ)"
        )
        await update.message.reply_text(response_text)

@app.route('/')
def health():
    """Health check"""
    return "Bot is running!", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        json_data = request.get_json()
        if json_data:
            update = Update.de_json(json_data, telegram_app.bot)
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(telegram_app.process_update(update))
            loop.close()
        return "OK"
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return "Error", 500

def setup_telegram_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞"""
    global telegram_app, bot_token
    
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not bot_token:
        logger.error("TELEGRAM_BOT_TOKEN not found!")
        return False
    
    logger.info(f"Setting up bot: {bot_token[:10]}...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    telegram_app = Application.builder().token(bot_token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    telegram_app.add_handler(CommandHandler("start", start_command))
    telegram_app.add_handler(MessageHandler(filters.ALL, handle_message))
    
    logger.info("Bot handlers registered")
    return True

def setup_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
    try:
        bot = Bot(token=bot_token)
        
        # –ü–æ–ª—É—á–∞–µ–º URL Railway
        railway_url = os.getenv('RAILWAY_PUBLIC_DOMAIN')
        if not railway_url:
            logger.warning("RAILWAY_PUBLIC_DOMAIN not found, webhook may not work")
            return
        
        webhook_url = f"https://{railway_url}/webhook"
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def set_webhook():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(bot.set_webhook(url=webhook_url))
            loop.close()
        
        thread = threading.Thread(target=set_webhook)
        thread.start()
        thread.join()
        
        logger.info(f"Webhook set: {webhook_url}")
        
    except Exception as e:
        logger.error(f"Webhook setup failed: {e}")

if __name__ == '__main__':
    logger.info("Starting BuyerChina Bot...")
    
    if setup_telegram_bot():
        setup_webhook()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
        port = int(os.environ.get('PORT', 8080))
        logger.info(f"Starting server on port {port}")
        app.run(host='0.0.0.0', port=port, debug=False)
    else:
        logger.error("Bot setup failed!")
        exit(1)
