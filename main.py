#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
from datetime import datetime
from flask import Flask, request, jsonify
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN not found!")
    exit(1)

BOT_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"
logger.info(f"Bot initialized: {BOT_TOKEN[:10]}...")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
MANAGER_CHAT_ID = os.getenv('MANAGER_CHAT_ID', '1169659218')  # ID —á–∞—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞

def create_order_id(user_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ ID –∑–∞–∫–∞–∑–∞ –±–µ–∑ Google Sheets"""
    try:
        timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
        order_id = f"ORD-{user_id}-{timestamp}"
        logger.info(f"‚úÖ Created order ID: {order_id}")
        return order_id
    except Exception as e:
        logger.error(f"Error creating order ID: {e}")
        return "ORD-ERROR"

def send_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        url = f"{BOT_URL}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'Markdown'
        }
        response = requests.post(url, json=data, timeout=10)
        logger.info(f"Message sent to {chat_id}: {response.status_code}")
        return response.json()
    except Exception as e:
        logger.error(f"Send message error: {e}")
        return None

def notify_manager(user_id, username, user_name, message_type, content, order_id=None):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
    try:
        if message_type == "photo":
            notification_text = (
                f"üì∏ *–ù–û–í–´–ô –ó–ê–ü–†–û–° - –§–û–¢–û*\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (@{username if username else '–±–µ–∑ username'})\n"
                f"üÜî ID: `{user_id}`\n"
                f"üìã –ó–∞–∫–∞–∑: `{order_id if order_id else 'N/A'}`\n\n"
                f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤ –≤ –ö–∏—Ç–∞–µ.\n\n"
                f"‚è∞ *–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!*"
            )
        else:
            notification_text = (
                f"üìù *–ù–û–í–´–ô –ó–ê–ü–†–û–° - –¢–ï–ö–°–¢*\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (@{username if username else '–±–µ–∑ username'})\n"
                f"üÜî ID: `{user_id}`\n"
                f"üìã –ó–∞–∫–∞–∑: `{order_id if order_id else 'N/A'}`\n\n"
                f"üí¨ –ó–∞–ø—Ä–æ—Å: _{content[:200] if content else 'N/A'}..._\n\n"
                f"‚è∞ *–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!*"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        send_message(MANAGER_CHAT_ID, notification_text)
        logger.info(f"‚úÖ Manager notified about request from user {user_id}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Failed to notify manager: {e}")
        return False

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Railway"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL –æ—Ç Railway
        railway_url = os.getenv('RAILWAY_PUBLIC_DOMAIN')
        if railway_url:
            webhook_url = f"https://{railway_url}/webhook"
        else:
            # Fallback URL - –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π URL
            webhook_url = f"https://web-production-ea35.up.railway.app/webhook"
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        delete_url = f"{BOT_URL}/deleteWebhook"
        requests.post(delete_url, timeout=10)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        set_url = f"{BOT_URL}/setWebhook"
        data = {'url': webhook_url}
        response = requests.post(set_url, json=data, timeout=10)
        result = response.json()
        
        if result.get('ok'):
            logger.info(f"‚úÖ Webhook set: {webhook_url}")
            return True
        else:
            logger.error(f"‚ùå Webhook failed: {result}")
            return False
            
    except Exception as e:
        logger.error(f"Webhook setup error: {e}")
        return False

@app.route('/')
def health():
    return "üá®üá≥ BuyerChina Bot is running on Railway!", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        data = request.get_json()
        logger.info(f"Received update: {data}")
        
        if 'message' in data:
            message = data['message']
            chat_id = message['chat']['id']
            user_data = message.get('from', {})
            user_id = user_data.get('id')
            user_name = user_data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            username = user_data.get('username', '')
            last_name = user_data.get('last_name', '')
            language = user_data.get('language_code', '')
            
            if 'text' in message and message['text'] == '/start':
                welcome_text = (
                    f"üá®üá≥ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BuyerChina, {user_name}!*\n\n"
                    "–í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –≤ –ö–∏—Ç–∞–µ.\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤."
                )
                send_message(chat_id, welcome_text)
                
            elif 'photo' in message:
                # –°–æ–∑–¥–∞–µ–º ID –∑–∞–∫–∞–∑–∞
                order_id = create_order_id(user_id)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                notify_manager(user_id, username, user_name, "photo", "Photo uploaded", order_id)
                
                response_text = (
                    f"üì∏ *–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ, {user_name}!*\n\n"
                    "‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É*\n\n"
                    "üë®‚Äçüíº –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ *15 –º–∏–Ω—É—Ç* –∏–ª–∏ –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è.\n\n"
                    "üîç –ú—ã –Ω–∞–π–¥–µ–º –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –ö–∏—Ç–∞–µ:\n"
                    "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ü–µ–Ω\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞\n"
                    "‚Ä¢ –ü–æ–º–æ—â—å —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∏ —Ç–∞–º–æ–∂–Ω–µ–π\n\n"
                    f"üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: `{order_id}`\n\n"
                    "üí¨ –ï—Å–ª–∏ —É –≤–∞—Å —Å—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é!"
                )
                send_message(chat_id, response_text)
                
            elif 'text' in message:
                text = message['text']
                
                # –°–æ–∑–¥–∞–µ–º ID –∑–∞–∫–∞–∑–∞
                order_id = create_order_id(user_id)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                notify_manager(user_id, username, user_name, "text", text, order_id)
                
                response_text = (
                    f"üìù *–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø—Ä–æ—Å, {user_name}!*\n\n"
                    f"üí¨ –í–∞—à –∑–∞–ø—Ä–æ—Å: _{text}_\n\n"
                    "‚úÖ *–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É*\n\n"
                    "üë®‚Äçüíº –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ *15 –º–∏–Ω—É—Ç* –∏–ª–∏ –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è.\n\n"
                    "üá®üá≥ –ú—ã –Ω–∞–π–¥–µ–º –¥–ª—è –≤–∞—Å:\n"
                    "‚Ä¢ –õ—É—á—à–∏–µ —Ü–µ–Ω—ã –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤\n"
                    "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏ —Ç–æ–≤–∞—Ä–∞\n"
                    "‚Ä¢ –ü–æ–º–æ—â—å —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∏ –¥–æ—Å—Ç–∞–≤–∫–æ–π\n"
                    "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é\n\n"
                    f"üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: `{order_id}`\n\n"
                    "üí¨ –î–ª—è —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é!"
                )
                send_message(chat_id, response_text)
        
        return "OK", 200
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return "Error", 500

def send_message(chat_id, text):
    try:
        url = f"{BOT_URL}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'Markdown'
        }
        response = requests.post(url, json=data, timeout=10)
        logger.info(f"Message sent to {chat_id}: {response.status_code}")
        return response.json()
    except Exception as e:
        logger.error(f"Send message error: {e}")

def notify_manager(user_id, username, user_name, message_type, content, order_id=None):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
    try:
        if message_type == "photo":
            notification_text = (
                f"üì∏ *–ù–û–í–´–ô –ó–ê–ü–†–û–° - –§–û–¢–û*\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (@{username if username else '–±–µ–∑ username'})\n"
                f"üÜî ID: `{user_id}`\n"
                f"üìã –ó–∞–∫–∞–∑: `{order_id if order_id else 'N/A'}`\n\n"
                f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤ –≤ –ö–∏—Ç–∞–µ.\n\n"
                f"‚è∞ *–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!*"
            )
        else:
            notification_text = (
                f"üìù *–ù–û–í–´–ô –ó–ê–ü–†–û–° - –¢–ï–ö–°–¢*\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (@{username if username else '–±–µ–∑ username'})\n"
                f"üÜî ID: `{user_id}`\n"
                f"üìã –ó–∞–∫–∞–∑: `{order_id if order_id else 'N/A'}`\n\n"
                f"üí¨ –ó–∞–ø—Ä–æ—Å: _{content[:200]}..._\n\n"
                f"‚è∞ *–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!*"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        send_message(MANAGER_CHAT_ID, notification_text)
        logger.info(f"‚úÖ Manager notified about request from user {user_id}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Failed to notify manager: {e}")
        return False

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Railway"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL –æ—Ç Railway
        railway_url = os.getenv('RAILWAY_PUBLIC_DOMAIN')
        if railway_url:
            webhook_url = f"https://{railway_url}/webhook"
        else:
            # Fallback URL - –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π URL
            webhook_url = f"https://web-production-ea35.up.railway.app/webhook"
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        delete_url = f"{BOT_URL}/deleteWebhook"
        requests.post(delete_url, timeout=10)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        set_url = f"{BOT_URL}/setWebhook"
        data = {'url': webhook_url}
        response = requests.post(set_url, json=data, timeout=10)
        result = response.json()
        
        if result.get('ok'):
            logger.info(f"‚úÖ Webhook set: {webhook_url}")
            return True
        else:
            logger.error(f"‚ùå Webhook failed: {result}")
            return False
            
    except Exception as e:
        logger.error(f"Webhook setup error: {e}")
        return False

@app.route('/set_webhook')
def manual_webhook():
    """–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
    if setup_webhook():
        return "‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    else:
        return "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook"

@app.route('/webhook_info')
def webhook_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook"""
    try:
        url = f"{BOT_URL}/getWebhookInfo"
        response = requests.get(url, timeout=10)
        result = response.json()
        return result
    except Exception as e:
        return {"error": str(e)}


if __name__ == '__main__':
    try:
        logger.info("üöÄ Starting BuyerChina Bot...")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        try:
            setup_webhook()
            logger.info("‚úÖ Webhook setup completed")
        except Exception as e:
            logger.error(f"‚ùå Webhook setup failed: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        port = int(os.getenv('PORT', 5000))
        logger.info(f"üöÄ Starting server on port {port}")
        app.run(host='0.0.0.0', port=port, debug=False)
        
    except Exception as e:
        logger.error(f"‚ùå Critical startup error: {e}")
        logger.info("üîÑ Attempting minimal startup...")
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        port = int(os.getenv('PORT', 5000))
        app.run(host='0.0.0.0', port=port, debug=False)
