#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
import json
from datetime import datetime
from flask import Flask, request, jsonify
import requests

# Google Sheets imports
try:
    import gspread
    from google.oauth2.service_account import Credentials
    GOOGLE_SHEETS_AVAILABLE = True
    logger = logging.getLogger(__name__)
    logger.info("Google Sheets libraries loaded successfully")
except ImportError as e:
    GOOGLE_SHEETS_AVAILABLE = False
    logger = logging.getLogger(__name__)
    logger.warning(f"Google Sheets libraries not available: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN not found!")
    exit(1)

BOT_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"
logger.info(f"Bot initialized: {BOT_TOKEN[:10]}...")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
MANAGER_CHAT_ID = os.getenv('MANAGER_CHAT_ID', '1169659218')  # ID —á–∞—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
MANAGER_USERNAME = os.getenv('MANAGER_USERNAME', '@Dim_Shi')  # Username –º–µ–Ω–µ–¥–∂–µ—Ä–∞

# Google Sheets setup
google_sheets = None

def init_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets"""
    global google_sheets
    
    if not GOOGLE_SHEETS_AVAILABLE:
        logger.warning("Google Sheets libraries not available")
        return False
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        google_creds_json = os.getenv('GOOGLE_CREDENTIALS_JSON')
        if not google_creds_json:
            logger.warning("GOOGLE_CREDENTIALS_JSON not found in environment")
            return False
        
        # –û—á–∏—â–∞–µ–º JSON –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        google_creds_json = google_creds_json.strip()
        if google_creds_json.startswith('"') and google_creds_json.endswith('"'):
            google_creds_json = google_creds_json[1:-1]
        
        # –ó–∞–º–µ–Ω—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
        google_creds_json = google_creds_json.replace('\\"', '"')
        google_creds_json = google_creds_json.replace('\\n', '\n')
        
        logger.info(f"JSON length: {len(google_creds_json)}, starts with: {google_creds_json[:50]}...")
        
        # –ü–∞—Ä—Å–∏–º JSON credentials
        creds_data = json.loads(google_creds_json)
        
        # –°–æ–∑–¥–∞–µ–º credentials
        scope = [
            'https://www.googleapis.com/auth/spreadsheets',
            'https://www.googleapis.com/auth/drive'
        ]
        creds = Credentials.from_service_account_info(creds_data, scopes=scope)
        gc = gspread.authorize(creds)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        try:
            spreadsheet = gc.open("BuyerChina Orders Tracking")
            logger.info("‚úÖ Connected to existing Google Sheets")
        except gspread.SpreadsheetNotFound:
            spreadsheet = gc.create("BuyerChina Orders Tracking")
            logger.info("‚úÖ Created new Google Sheets")
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
            try:
                spreadsheet.add_worksheet(title="Orders", rows="1000", cols="20")
                spreadsheet.add_worksheet(title="Users", rows="1000", cols="15") 
                spreadsheet.add_worksheet(title="Analytics", rows="1000", cols="10")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª–∏—Å—Ç–∞ Orders
                orders_sheet = spreadsheet.worksheet("Orders")
                headers = [
                    "Timestamp", "User ID", "Username", "Product", "Description", 
                    "Price", "Supplier", "Status", "Order ID", "Notes"
                ]
                orders_sheet.append_row(headers)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª–∏—Å—Ç–∞ Users
                users_sheet = spreadsheet.worksheet("Users")
                user_headers = [
                    "Timestamp", "User ID", "Username", "First Name", "Last Name",
                    "Language", "Action", "Message Type", "Content"
                ]
                users_sheet.append_row(user_headers)
                
                logger.info("‚úÖ Created sheets with headers")
            except Exception as e:
                logger.error(f"Error creating sheets: {e}")
        
        google_sheets = spreadsheet
        logger.info("‚úÖ Google Sheets initialized successfully")
        return True
        
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå Invalid JSON in GOOGLE_CREDENTIALS_JSON: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå Google Sheets initialization failed: {e}")
        return False

def log_user_activity(user_id, username, first_name, last_name, language, action, message_type, content):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets"""
    if not google_sheets:
        logger.warning("Google Sheets not available for logging user activity")
        return False
    
    try:
        users_sheet = google_sheets.worksheet("Users")
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        row = [
            str(timestamp), str(user_id), str(username or ""), str(first_name or ""), str(last_name or ""),
            str(language or ""), str(action), str(message_type), str(content[:100] if content else "")
        ]
        
        users_sheet.append_row(row)
        logger.info(f"‚úÖ Logged user activity: {user_id} - {action}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Failed to log user activity: {e}")
        return False

def create_order(user_id, username, product, description, price, supplier):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ Google Sheets"""
    if not google_sheets:
        logger.warning("Google Sheets not available for creating order")
        return None
    
    try:
        orders_sheet = google_sheets.worksheet("Orders")
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        order_id = f"ORD-{user_id}-{datetime.now().strftime('%Y%m%d%H%M%S')}"
        
        row = [
            str(timestamp), str(user_id), str(username or ""), str(product), str(description),
            str(price), str(supplier), "New", str(order_id), ""
        ]
        
        orders_sheet.append_row(row)
        logger.info(f"‚úÖ Created order: {order_id}")
        return order_id
        
    except Exception as e:
        logger.error(f"‚ùå Failed to create order: {e}")
        return None

@app.route('/')
def health():
    return "üá®üá≥ BuyerChina Bot is running on Railway!", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        data = request.get_json()
        logger.info(f"Received update: {data}")
        
        if 'message' in data:
            message = data['message']
            chat_id = message['chat']['id']
            user_data = message.get('from', {})
            user_id = user_data.get('id')
            user_name = user_data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            username = user_data.get('username', '')
            last_name = user_data.get('last_name', '')
            language = user_data.get('language_code', '')
            
            if 'text' in message and message['text'] == '/start':
                # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                log_user_activity(user_id, username, user_name, last_name, language, 
                                "start_command", "text", "/start")
                
                welcome_text = (
                    f"üá®üá≥ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BuyerChina, {user_name}!*\n\n"
                    "–í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –≤ –ö–∏—Ç–∞–µ.\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤.\n\n"
                    "üìä –í—Å–µ –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Google Sheets –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."
                )
                send_message(chat_id, welcome_text)
                
            elif 'photo' in message:
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ
                log_user_activity(user_id, username, user_name, last_name, language,
                                "photo_upload", "photo", "Photo uploaded for analysis")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ Google Sheets
                order_id = create_order(user_id, username, "Photo Product", 
                                      "Product from uploaded photo", "$11.80", 
                                      "Shenzhen Manufacturer")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                notify_manager(user_id, username, user_name, "photo", "Photo uploaded", order_id)
                
                response_text = (
                    f"üì∏ *–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ, {user_name}!*\n\n"
                    "‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É*\n\n"
                    f"üë®‚Äçüíº –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä {MANAGER_USERNAME} —É–∂–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ *15 –º–∏–Ω—É—Ç* –∏–ª–∏ –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è.\n\n"
                    "üîç –ú—ã –Ω–∞–π–¥–µ–º –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –ö–∏—Ç–∞–µ:\n"
                    "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ü–µ–Ω\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞\n"
                    "‚Ä¢ –ü–æ–º–æ—â—å —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∏ —Ç–∞–º–æ–∂–Ω–µ–π\n\n"
                    f"üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: `{order_id if order_id else 'N/A'}`\n\n"
                    "üí¨ –ï—Å–ª–∏ —É –≤–∞—Å —Å—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ {MANAGER_USERNAME} –Ω–∞–ø—Ä—è–º—É—é!"
                )
                send_message(chat_id, response_text)
                
            elif 'text' in message:
                text = message['text']
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                log_user_activity(user_id, username, user_name, last_name, language,
                                "text_query", "text", text)
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                order_id = create_order(user_id, username, text, 
                                      f"Search query: {text}", "$8.90", 
                                      "Alibaba Supplier A")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                notify_manager(user_id, username, user_name, "text", text, order_id)
                
                response_text = (
                    f"üìù *–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø—Ä–æ—Å, {user_name}!*\n\n"
                    f"üí¨ –í–∞—à –∑–∞–ø—Ä–æ—Å: _{text}_\n\n"
                    "‚úÖ *–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É*\n\n"
                    f"üë®‚Äçüíº –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä {MANAGER_USERNAME} —É–∂–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ *15 –º–∏–Ω—É—Ç* –∏–ª–∏ –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è.\n\n"
                    "üá®üá≥ –ú—ã –Ω–∞–π–¥–µ–º –¥–ª—è –≤–∞—Å:\n"
                    "‚Ä¢ –õ—É—á—à–∏–µ —Ü–µ–Ω—ã –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤\n"
                    "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏ —Ç–æ–≤–∞—Ä–∞\n"
                    "‚Ä¢ –ü–æ–º–æ—â—å —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∏ –¥–æ—Å—Ç–∞–≤–∫–æ–π\n"
                    "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é\n\n"
                    f"üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: `{order_id if order_id else 'N/A'}`\n\n"
                    f"üí¨ –î–ª—è —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–∏—à–∏—Ç–µ {MANAGER_USERNAME} –Ω–∞–ø—Ä—è–º—É—é!"
                )
                send_message(chat_id, response_text)
        
        return "OK", 200
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return "Error", 500

def send_message(chat_id, text):
    try:
        url = f"{BOT_URL}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'Markdown'
        }
        response = requests.post(url, json=data, timeout=10)
        logger.info(f"Message sent to {chat_id}: {response.status_code}")
        return response.json()
    except Exception as e:
        logger.error(f"Send message error: {e}")

def notify_manager(user_id, username, user_name, message_type, content, order_id=None):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
    try:
        if message_type == "photo":
            notification_text = (
                f"üì∏ *–ù–û–í–´–ô –ó–ê–ü–†–û–° - –§–û–¢–û*\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (@{username if username else '–±–µ–∑ username'})\n"
                f"üÜî ID: `{user_id}`\n"
                f"üìã –ó–∞–∫–∞–∑: `{order_id if order_id else 'N/A'}`\n\n"
                f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤ –≤ –ö–∏—Ç–∞–µ.\n\n"
                f"‚è∞ *–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!*"
            )
        else:
            notification_text = (
                f"üìù *–ù–û–í–´–ô –ó–ê–ü–†–û–° - –¢–ï–ö–°–¢*\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (@{username if username else '–±–µ–∑ username'})\n"
                f"üÜî ID: `{user_id}`\n"
                f"üìã –ó–∞–∫–∞–∑: `{order_id if order_id else 'N/A'}`\n\n"
                f"üí¨ –ó–∞–ø—Ä–æ—Å: _{content[:200]}..._\n\n"
                f"‚è∞ *–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!*"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        send_message(MANAGER_CHAT_ID, notification_text)
        logger.info(f"‚úÖ Manager notified about request from user {user_id}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Failed to notify manager: {e}")
        return False

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Railway"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL –æ—Ç Railway
        railway_url = os.getenv('RAILWAY_PUBLIC_DOMAIN')
        if railway_url:
            webhook_url = f"https://{railway_url}/webhook"
        else:
            # Fallback URL - –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π URL
            webhook_url = f"https://web-production-ea35.up.railway.app/webhook"
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        delete_url = f"{BOT_URL}/deleteWebhook"
        requests.post(delete_url, timeout=10)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        set_url = f"{BOT_URL}/setWebhook"
        data = {'url': webhook_url}
        response = requests.post(set_url, json=data, timeout=10)
        result = response.json()
        
        if result.get('ok'):
            logger.info(f"‚úÖ Webhook set: {webhook_url}")
            return True
        else:
            logger.error(f"‚ùå Webhook failed: {result}")
            return False
            
    except Exception as e:
        logger.error(f"Webhook setup error: {e}")
        return False

@app.route('/set_webhook')
def manual_webhook():
    """–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
    if setup_webhook():
        return "‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    else:
        return "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook"

@app.route('/webhook_info')
def webhook_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook"""
    try:
        url = f"{BOT_URL}/getWebhookInfo"
        response = requests.get(url, timeout=10)
        result = response.json()
        return result
    except Exception as e:
        return {"error": str(e)}

@app.route('/sheets_status')
def sheets_status():
    """–°—Ç–∞—Ç—É—Å Google Sheets"""
    if google_sheets:
        try:
            sheet_url = f"https://docs.google.com/spreadsheets/d/{google_sheets.id}"
            return {
                "status": "connected",
                "sheet_id": google_sheets.id,
                "sheet_url": sheet_url,
                "title": google_sheets.title
            }
        except Exception as e:
            return {"status": "error", "error": str(e)}
    else:
        return {"status": "not_connected", "message": "Google Sheets not initialized"}

@app.route('/test_sheets')
def test_sheets():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets"""
    if not google_sheets:
        return {"error": "Google Sheets not connected"}
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –≤ Users
        test_result = log_user_activity(
            user_id=1169659218,
            username="test_user", 
            first_name="Test",
            last_name="User",
            language="ru",
            action="test_action",
            message_type="test",
            content="Test message from /test_sheets endpoint"
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        order_id = create_order(
            user_id=1169659218,
            username="test_user",
            product="Test Product",
            description="Test order from /test_sheets endpoint", 
            price="$10.00",
            supplier="Test Supplier"
        )
        
        return {
            "user_activity_logged": test_result,
            "order_created": order_id,
            "sheet_url": f"https://docs.google.com/spreadsheets/d/{google_sheets.id}"
        }
        
    except Exception as e:
        logger.error(f"Test sheets error: {e}")
        return {"error": str(e)}

if __name__ == '__main__':
    try:
        logger.info("üöÄ Starting BuyerChina Bot with Google Sheets integration...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets
        try:
            if init_google_sheets():
                logger.info("‚úÖ Google Sheets integration enabled")
            else:
                logger.warning("‚ö†Ô∏è Google Sheets integration disabled - continuing without it")
        except Exception as e:
            logger.error(f"‚ùå Google Sheets setup failed: {e}")
            logger.info("üîÑ Continuing without Google Sheets...")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        try:
            setup_webhook()
            logger.info("‚úÖ Webhook setup completed")
        except Exception as e:
            logger.error(f"‚ùå Webhook setup failed: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        port = int(os.getenv('PORT', 5000))
        logger.info(f"üöÄ Starting server on port {port}")
        app.run(host='0.0.0.0', port=port, debug=False)
        
    except Exception as e:
        logger.error(f"‚ùå Critical startup error: {e}")
        logger.info("üîÑ Attempting minimal startup...")
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        port = int(os.getenv('PORT', 5000))
        app.run(host='0.0.0.0', port=port, debug=False)
