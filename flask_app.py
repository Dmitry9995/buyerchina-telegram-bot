#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
import json
from flask import Flask, request
import requests
from datetime import datetime
import mimetypes
from urllib.parse import urlparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Google Sheets imports - —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    import gspread
    from google.oauth2.service_account import Credentials
    GOOGLE_SHEETS_AVAILABLE = True
except ImportError:
    GOOGLE_SHEETS_AVAILABLE = False
    logger.warning("Google Sheets libraries not available")

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BOT_TOKEN = None
BOT_URL = None

# Google Sheets
google_sheets = None
orders_data = {}
users_data = {}

# –ê–¥–º–∏–Ω—ã
ADMIN_IDS = [1169659218]  # –í–∞—à ID –∞–¥–º–∏–Ω–∞

def get_file_info(file_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ"""
    try:
        url = f"{BOT_URL}/getFile"
        data = {'file_id': file_id}
        response = requests.post(url, json=data, timeout=15)
        result = response.json()
        
        if result.get('ok'):
            return result['result']
        else:
            logger.error(f"Failed to get file info: {result}")
            return None
    except Exception as e:
        logger.error(f"Get file info error: {e}")
        return None

def download_file(file_path):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram"""
    try:
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"
        response = requests.get(file_url, timeout=30)
        
        if response.status_code == 200:
            return response.content
        else:
            logger.error(f"Failed to download file: {response.status_code}")
            return None
    except Exception as e:
        logger.error(f"Download file error: {e}")
        return None

def get_file_type_info(file_name):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    if not file_name:
        return "unknown", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª"
    
    file_name_lower = file_name.lower()
    
    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if any(file_name_lower.endswith(ext) for ext in ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp']):
        return "photo", "üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    
    # Excel —Ñ–∞–π–ª—ã
    elif any(file_name_lower.endswith(ext) for ext in ['.xlsx', '.xls', '.xlsm']):
        return "excel", "üìä Excel —Ç–∞–±–ª–∏—Ü–∞"
    
    # PDF —Ñ–∞–π–ª—ã
    elif file_name_lower.endswith('.pdf'):
        return "pdf", "üìÑ PDF –¥–æ–∫—É–º–µ–Ω—Ç"
    
    # Word —Ñ–∞–π–ª—ã
    elif any(file_name_lower.endswith(ext) for ext in ['.docx', '.doc']):
        return "word", "üìù Word –¥–æ–∫—É–º–µ–Ω—Ç"
    
    # –î—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    elif any(file_name_lower.endswith(ext) for ext in ['.txt', '.rtf']):
        return "document", "üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"
    
    else:
        return "other", "üìé –§–∞–π–ª"

def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API"""
    try:
        url = f"{BOT_URL}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'Markdown'
        }
        if reply_markup:
            data['reply_markup'] = reply_markup
        response = requests.post(url, json=data, timeout=10)
        return response.json()
    except Exception as e:
        logger.error(f"Send message error: {e}")
        return None

def create_main_menu(user_id=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = {
        "inline_keyboard": [
            [{"text": "üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤", "callback_data": "search"}],
            [{"text": "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", "callback_data": "verify"}],
            [{"text": "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "callback_data": "orders"}],
            [{"text": "üöö –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", "callback_data": "tracking"}],
            [{"text": "‚ùì –ü–æ–º–æ—â—å", "callback_data": "help"}, 
             {"text": "üåê –Ø–∑—ã–∫", "callback_data": "language"}]
        ]
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if user_id and user_id in ADMIN_IDS:
        keyboard["inline_keyboard"].append([{"text": "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", "callback_data": "admin"}])
    
    return keyboard

def init_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets"""
    global google_sheets
    
    if not GOOGLE_SHEETS_AVAILABLE:
        logger.info("Google Sheets libraries not available, skipping initialization")
        return None
        
    try:
        if not os.path.exists('credentials.json'):
            logger.warning("credentials.json not found. Google Sheets disabled.")
            return None
        
        scope = [
            'https://www.googleapis.com/auth/spreadsheets',
            'https://www.googleapis.com/auth/drive'
        ]
        
        creds = Credentials.from_service_account_file('credentials.json', scopes=scope)
        gc = gspread.authorize(creds)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        try:
            spreadsheet = gc.open("BuyerChina Orders Tracking")
        except gspread.SpreadsheetNotFound:
            spreadsheet = gc.create("BuyerChina Orders Tracking")
            # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
            spreadsheet.add_worksheet(title="Orders", rows="1000", cols="20")
            spreadsheet.add_worksheet(title="Users", rows="1000", cols="15")
            spreadsheet.add_worksheet(title="Analytics", rows="1000", cols="10")
        
        google_sheets = spreadsheet
        logger.info("Google Sheets connected successfully")
        return spreadsheet
        
    except Exception as e:
        logger.error(f"Google Sheets init error: {e}")
        return None

def sync_user_data(user_id, user_info):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Google Sheets"""
    if not google_sheets:
        return
    
    try:
        users_sheet = google_sheets.worksheet("Users")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        try:
            cell = users_sheet.find(str(user_id))
            row = cell.row
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            users_sheet.update(f'B{row}:H{row}', [[
                user_info.get('username', ''),
                user_info.get('first_name', ''),
                user_info.get('last_name', ''),
                user_info.get('language', 'ru'),
                datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                user_info.get('orders_count', 0),
                user_info.get('status', 'active')
            ]])
        except gspread.CellNotFound:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            users_sheet.append_row([
                user_id,
                user_info.get('username', ''),
                user_info.get('first_name', ''),
                user_info.get('last_name', ''),
                user_info.get('language', 'ru'),
                datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                user_info.get('orders_count', 0),
                user_info.get('status', 'active')
            ])
    except Exception as e:
        logger.error(f"User sync error: {e}")

def create_order(user_id, product_info):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    order_id = f"ORD{datetime.now().strftime('%Y%m%d%H%M%S')}"
    order_data = {
        'order_id': order_id,
        'user_id': user_id,
        'product': product_info,
        'status': 'pending',
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'total_amount': 0
    }
    
    orders_data[order_id] = order_data
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets
    if google_sheets:
        try:
            orders_sheet = google_sheets.worksheet("Orders")
            orders_sheet.append_row([
                order_id,
                user_id,
                product_info,
                'pending',
                datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                0,
                '',  # supplier
                '',  # tracking
                ''   # notes
            ])
        except Exception as e:
            logger.error(f"Order sync error: {e}")
    
    return order_id

@app.route('/')
def health():
    """Health check"""
    return "üá®üá≥ BuyerChina Bot is running on PythonAnywhere!", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram"""
    try:
        data = request.get_json()
        logger.info(f"Received update: {data}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
        if 'callback_query' in data:
            callback = data['callback_query']
            chat_id = callback['message']['chat']['id']
            message_id = callback['message']['message_id']
            callback_data = callback['data']
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            answer_callback_query(callback['id'])
            
            if callback_data == 'search':
                response_text = "üîç *–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤ –≤ –ö–∏—Ç–∞–µ."
                edit_message(chat_id, message_id, response_text)
            elif callback_data == 'verify':
                response_text = "‚úÖ *–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
                edit_message(chat_id, message_id, response_text)
            elif callback_data == 'orders':
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_orders = [o for o in orders_data.values() if o['user_id'] == chat_id]
                if user_orders:
                    response_text = "üì¶ *–ú–æ–∏ –∑–∞–∫–∞–∑—ã*\n\n"
                    for order in user_orders[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤
                        response_text += f"üî∏ {order['order_id']}\n"
                        response_text += f"üìù {order['product'][:50]}...\n"
                        response_text += f"üìä –°—Ç–∞—Ç—É—Å: {order['status']}\n"
                        response_text += f"üìÖ {order['created_at']}\n\n"
                else:
                    response_text = "üì¶ *–ú–æ–∏ –∑–∞–∫–∞–∑—ã*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞."
                
                back_keyboard = {
                    "inline_keyboard": [[{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "callback_data": "back"}]]
                }
                edit_message(chat_id, message_id, response_text, back_keyboard)
            elif callback_data == 'tracking':
                response_text = "üöö *–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—ã–ª–æ–∫*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å—ã–ª–∫–∏."
                edit_message(chat_id, message_id, response_text)
            elif callback_data == 'admin':
                if chat_id in ADMIN_IDS:
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
                    total_users = len(users_data)
                    total_orders = len(orders_data)
                    pending_orders = len([o for o in orders_data.values() if o['status'] == 'pending'])
                    
                    sheets_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ" if google_sheets else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"
                    
                    response_text = (
                        "‚öôÔ∏è *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*\n\n"
                        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
                        f"‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {pending_orders}\n"
                        f"üìä Google Sheets: {sheets_status}\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                    )
                    
                    admin_keyboard = {
                        "inline_keyboard": [
                            [{"text": "üìã –í—Å–µ –∑–∞–∫–∞–∑—ã", "callback_data": "admin_orders"}],
                            [{"text": "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "callback_data": "admin_users"}],
                            [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "admin_stats"}]
                        ]
                    }
                    
                    if google_sheets:
                        admin_keyboard["inline_keyboard"].append([
                            {"text": "üìä –û—Ç–∫—Ä—ã—Ç—å Google Sheets", "url": f"https://docs.google.com/spreadsheets/d/{google_sheets.id}"}
                        ])
                    
                    admin_keyboard["inline_keyboard"].append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back"}])
                    
                    edit_message(chat_id, message_id, response_text, admin_keyboard)
                else:
                    response_text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏."
                    edit_message(chat_id, message_id, response_text)
            elif callback_data == 'help':
                response_text = (
                    "‚ùì *–ü–æ–º–æ—â—å BuyerChina Bot*\n\n"
                    "*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
                    "üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ñ–æ—Ç–æ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é\n"
                    "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤\n"
                    "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n"
                    "üöö –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—ã–ª–æ–∫\n\n"
                    "*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
                    "1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –º–µ–Ω—é\n"
                    "2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n"
                    "3. –ü–æ–ª—É—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
                )
                back_keyboard = {
                    "inline_keyboard": [[{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "callback_data": "back"}]]
                }
                edit_message(chat_id, message_id, response_text, back_keyboard)
            elif callback_data == 'language':
                response_text = "üåê *–í—ã–±–æ—Ä —è–∑—ã–∫–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫:"
                lang_keyboard = {
                    "inline_keyboard": [
                        [{"text": "üá∑üá∫ –†—É—Å—Å–∫–∏–π", "callback_data": "lang_ru"}],
                        [{"text": "üá∫üá∏ English", "callback_data": "lang_en"}],
                        [{"text": "üá®üá≥ ‰∏≠Êñá", "callback_data": "lang_zh"}],
                        [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back"}]
                    ]
                }
                edit_message(chat_id, message_id, response_text, lang_keyboard)
            elif callback_data == 'back':
                welcome_text = (
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
                    "–Ø ‚Äî –≤–∞—à **–±–∞–π–µ—Ä –≤ –ö–∏—Ç–∞–µ** —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ 5 –ª–µ—Ç.\n\n"
                    "üîπ **–ß—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å:**\n"
                    "- –ü–æ–∏—Å–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –ö–∏—Ç–∞–µ\n"
                    "- –ü–æ–¥–±–æ—Ä –∏ –ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–ø—Ä—è–º—É—é —Å —Ñ–∞–±—Ä–∏–∫\n"
                    "- –û–ø–ª–∞—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π\n"
                    "- –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è –≤ –†–æ—Å—Å–∏—é –∏ –°–ù–ì\n"
                    "- –ü–æ–ª–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ–¥ –∫–ª—é—á\n\n"
                    "üì¶ **–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n"
                    "–ø–æ–∫—É–ø–∫–∞ –∫–∏—Ç–∞–π—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ ‚Ä¢ –ª–æ–≥–∏—Å—Ç–∏–∫–∞ –∏–∑ –ö–∏—Ç–∞—è ‚Ä¢ –¥–æ—Å—Ç–∞–≤–∫–∞ –æ–ø—Ç–æ–º ‚Ä¢ –ø–æ–º–æ—â—å –≤ –ø–æ–∫—É–ø–∫–µ ‚Ä¢ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ ‚Ä¢ –ø–æ–¥–±–æ—Ä —Ç–æ–≤–∞—Ä–∞\n\n"
                    "üí¨ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏ –ø—Ä–∏—à–ª–∏ –¢–ó –∏–ª–∏ —Ñ–æ—Ç–æ.\n\n"
                    "#–±–∞–π–µ—Ä #–ö–∏—Ç–∞–π #–¥–æ—Å—Ç–∞–≤–∫–∞–∏–∑–∫–∏—Ç–∞—è #–ª–æ–≥–∏—Å—Ç–∏–∫–∞ #–ø–æ–∫—É–ø–∫–∞—Ç–æ–≤–∞—Ä–æ–≤ #–ø—Ä–æ–≤–µ—Ä–∫–∞–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ #–æ–ø—Ç\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
                )
                edit_message(chat_id, message_id, welcome_text, create_main_menu(chat_id))
            elif callback_data.startswith('admin_'):
                if chat_id not in ADMIN_IDS:
                    response_text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è–º."
                    edit_message(chat_id, message_id, response_text)
                    return
                
                action = callback_data.split('_')[1]
                if action == 'orders':
                    if orders_data:
                        response_text = "üìã *–í—Å–µ –∑–∞–∫–∞–∑—ã*\n\n"
                        for order_id, order in list(orders_data.items())[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤
                            response_text += f"üî∏ {order_id}\n"
                            response_text += f"üë§ User: {order['user_id']}\n"
                            response_text += f"üìù {order['product'][:40]}...\n"
                            response_text += f"üìä {order['status']}\n"
                            response_text += f"üìÖ {order['created_at']}\n\n"
                    else:
                        response_text = "üìã *–í—Å–µ –∑–∞–∫–∞–∑—ã*\n\n–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
                elif action == 'users':
                    response_text = f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}\n\n"
                    if google_sheets:
                        response_text += "üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ Google Sheets."
                elif action == 'stats':
                    total_orders = len(orders_data)
                    pending = len([o for o in orders_data.values() if o['status'] == 'pending'])
                    completed = len([o for o in orders_data.values() if o['status'] == 'completed'])
                    
                    response_text = (
                        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
                        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
                        f"‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {pending}\n"
                        f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}\n"
                        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}\n"
                    )
                
                back_keyboard = {
                    "inline_keyboard": [
                        [{"text": "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", "callback_data": "admin"}],
                        [{"text": "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back"}]
                    ]
                }
                edit_message(chat_id, message_id, response_text, back_keyboard)
            elif callback_data.startswith('order_'):
                order_id = callback_data.split('_')[1]
                if order_id in orders_data:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                    orders_data[order_id]['status'] = 'confirmed'
                    
                    response_text = (
                        f"‚úÖ *–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!*\n\n"
                        f"üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: `{order_id}`\n"
                        f"üìù –¢–æ–≤–∞—Ä: {orders_data[order_id]['product']}\n"
                        f"üìä –°—Ç–∞—Ç—É—Å: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\n\n"
                        "*–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:*\n"
                        "1. ‚è≥ –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞\n"
                        "2. üí∞ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –∏ —É—Å–ª–æ–≤–∏–π\n"
                        "3. üöö –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏\n"
                        "4. üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏\n\n"
                        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!"
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ Google Sheets
                    if google_sheets:
                        try:
                            orders_sheet = google_sheets.worksheet("Orders")
                            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –∑–∞–∫–∞–∑–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                            cell = orders_sheet.find(order_id)
                            if cell:
                                orders_sheet.update_cell(cell.row, 4, 'confirmed')
                        except Exception as e:
                            logger.error(f"Google Sheets update error: {e}")
                    
                    back_keyboard = {
                        "inline_keyboard": [
                            [{"text": "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "callback_data": "orders"}],
                            [{"text": "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back"}]
                        ]
                    }
                    edit_message(chat_id, message_id, response_text, back_keyboard)
                else:
                    response_text = "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω."
                    edit_message(chat_id, message_id, response_text)
            elif callback_data.startswith('lang_'):
                lang = callback_data.split('_')[1]
                lang_names = {'ru': '–†—É—Å—Å–∫–∏–π', 'en': 'English', 'zh': '‰∏≠Êñá'}
                response_text = f"‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {lang_names.get(lang, lang)}"
                edit_message(chat_id, message_id, response_text)
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                import time
                time.sleep(2)
                welcome_text = (
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
                    "–Ø ‚Äî –≤–∞—à **–±–∞–π–µ—Ä –≤ –ö–∏—Ç–∞–µ** —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ 5 –ª–µ—Ç.\n\n"
                    "üîπ **–ß—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å:**\n"
                    "- –ü–æ–∏—Å–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –ö–∏—Ç–∞–µ\n"
                    "- –ü–æ–¥–±–æ—Ä –∏ –ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–ø—Ä—è–º—É—é —Å —Ñ–∞–±—Ä–∏–∫\n"
                    "- –û–ø–ª–∞—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π\n"
                    "- –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è –≤ –†–æ—Å—Å–∏—é –∏ –°–ù–ì\n"
                    "- –ü–æ–ª–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ–¥ –∫–ª—é—á\n\n"
                    "üì¶ **–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n"
                    "–ø–æ–∫—É–ø–∫–∞ –∫–∏—Ç–∞–π—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ ‚Ä¢ –ª–æ–≥–∏—Å—Ç–∏–∫–∞ –∏–∑ –ö–∏—Ç–∞—è ‚Ä¢ –¥–æ—Å—Ç–∞–≤–∫–∞ –æ–ø—Ç–æ–º ‚Ä¢ –ø–æ–º–æ—â—å –≤ –ø–æ–∫—É–ø–∫–µ ‚Ä¢ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ ‚Ä¢ –ø–æ–¥–±–æ—Ä —Ç–æ–≤–∞—Ä–∞\n\n"
                    "üí¨ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏ –ø—Ä–∏—à–ª–∏ –¢–ó –∏–ª–∏ —Ñ–æ—Ç–æ.\n\n"
                    "#–±–∞–π–µ—Ä #–ö–∏—Ç–∞–π #–¥–æ—Å—Ç–∞–≤–∫–∞–∏–∑–∫–∏—Ç–∞—è #–ª–æ–≥–∏—Å—Ç–∏–∫–∞ #–ø–æ–∫—É–ø–∫–∞—Ç–æ–≤–∞—Ä–æ–≤ #–ø—Ä–æ–≤–µ—Ä–∫–∞–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ #–æ–ø—Ç\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
                )
                edit_message(chat_id, message_id, welcome_text, create_main_menu())
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        elif 'message' in data:
            message = data['message']
            chat_id = message['chat']['id']
            user_name = message.get('from', {}).get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
            if 'text' in message and message['text'] == '/start':
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_info = {
                    'username': message.get('from', {}).get('username', ''),
                    'first_name': user_name,
                    'last_name': message.get('from', {}).get('last_name', ''),
                    'language': 'ru',
                    'orders_count': len([o for o in orders_data.values() if o['user_id'] == chat_id]),
                    'status': 'active'
                }
                sync_user_data(chat_id, user_info)
                
                welcome_text = (
                    f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
                    f"–Ø ‚Äî –≤–∞—à **–±–∞–π–µ—Ä –≤ –ö–∏—Ç–∞–µ** —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ 5 –ª–µ—Ç.\n\n"
                    f"üîπ **–ß—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å:**\n"
                    f"- –ü–æ–∏—Å–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –ö–∏—Ç–∞–µ\n"
                    f"- –ü–æ–¥–±–æ—Ä –∏ –ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–ø—Ä—è–º—É—é —Å —Ñ–∞–±—Ä–∏–∫\n"
                    f"- –û–ø–ª–∞—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π\n"
                    f"- –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è –≤ –†–æ—Å—Å–∏—é –∏ –°–ù–ì\n"
                    f"- –ü–æ–ª–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ–¥ –∫–ª—é—á\n\n"
                    f"üì¶ **–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n"
                    f"–ø–æ–∫—É–ø–∫–∞ –∫–∏—Ç–∞–π—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ ‚Ä¢ –ª–æ–≥–∏—Å—Ç–∏–∫–∞ –∏–∑ –ö–∏—Ç–∞—è ‚Ä¢ –¥–æ—Å—Ç–∞–≤–∫–∞ –æ–ø—Ç–æ–º ‚Ä¢ –ø–æ–º–æ—â—å –≤ –ø–æ–∫—É–ø–∫–µ ‚Ä¢ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ ‚Ä¢ –ø–æ–¥–±–æ—Ä —Ç–æ–≤–∞—Ä–∞\n\n"
                    f"üí¨ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏ –ø—Ä–∏—à–ª–∏ –¢–ó –∏–ª–∏ —Ñ–æ—Ç–æ.\n\n"
                    f"#–±–∞–π–µ—Ä #–ö–∏—Ç–∞–π #–¥–æ—Å—Ç–∞–≤–∫–∞–∏–∑–∫–∏—Ç–∞—è #–ª–æ–≥–∏—Å—Ç–∏–∫–∞ #–ø–æ–∫—É–ø–∫–∞—Ç–æ–≤–∞—Ä–æ–≤ #–ø—Ä–æ–≤–µ—Ä–∫–∞–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ #–æ–ø—Ç\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
                )
                send_message(chat_id, welcome_text, create_main_menu(chat_id))
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
            elif 'photo' in message:
                username = message.get('from', {}).get('username', 'Unknown')
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º–æ–º –±–æ–ª—å—à–æ–º —Ñ–æ—Ç–æ
                photos = message['photo']
                largest_photo = max(photos, key=lambda x: x.get('file_size', 0))
                file_id = largest_photo['file_id']
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                file_info = get_file_info(file_id)
                logger.info(f"Photo file info: {file_info}")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ç–æ
                product_info = f"–ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ –æ—Ç @{username}"
                order_id = create_order(chat_id, product_info)
                
                response_text = (
                    f"üì∏ *–ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ –æ—Ç @{username}!*\n\n"
                    "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...\n"
                    "üá®üá≥ –ò—â—É –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –ö–∏—Ç–∞–µ...\n"
                    "üí∞ –°—Ä–∞–≤–Ω–∏–≤–∞—é —Ü–µ–Ω—ã —É —Ä–∞–∑–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...\n\n"
                    f"üìã –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑: `{order_id}`\n"
                    "‚è≥ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥!\n\n"
                    "*–ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:*\n"
                    "üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫ 1: Guangzhou Factory - $12.50\n"
                    "üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫ 2: Shenzhen Manufacturer - $11.80\n"
                    "üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫ 3: Yiwu Supplier - $13.20\n\n"
                    "‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: Shenzhen Manufacturer (–ª—É—á—à–∞—è —Ü–µ–Ω–∞)"
                )
                back_keyboard = {
                    "inline_keyboard": [
                        [{"text": "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "callback_data": f"order_{order_id}"}],
                        [{"text": "üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", "callback_data": "search"}],
                        [{"text": "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back"}]
                    ]
                }
                send_message(chat_id, response_text, back_keyboard)
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            elif 'document' in message:
                document = message['document']
                file_name = document.get('file_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                file_size = document.get('file_size', 0)
                file_id = document['file_id']
                username = message.get('from', {}).get('username', 'Unknown')
                
                logger.info(f"üìé Document received from {user_name}: {file_name} ({file_size} bytes)")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                file_type, file_desc = get_file_type_info(file_name)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã
                supported_types = ['excel', 'pdf', 'word', 'document']
                if file_type not in supported_types:
                    response_text = (
                        f"‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, {user_name}!\n\n"
                        f"–§–∞–π–ª '{file_name}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n\n"
                        f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                        f"üìä Excel: .xlsx, .xls\n"
                        f"üìÑ PDF: .pdf\n"
                        f"üìù Word: .docx, .doc\n"
                        f"üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: .jpg, .png, .gif\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
                    )
                    send_message(chat_id, response_text)
                    return "OK", 200
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                file_info = get_file_info(file_id)
                if file_info:
                    file_info['file_name'] = file_name
                    file_info['file_type'] = file_type
                
                logger.info(f"Document file info: {file_info}")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                product_info = f"–ü–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É: {file_name} –æ—Ç @{username}"
                order_id = create_order(chat_id, product_info)
                
                response_text = (
                    f"{file_desc} *–ø–æ–ª—É—á–µ–Ω –æ—Ç @{username}!*\n\n"
                    f"üìé –§–∞–π–ª: {file_name}\n"
                    f"üìè –†–∞–∑–º–µ—Ä: {file_size // 1024} –ö–ë\n\n"
                    "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç...\n"
                    "üá®üá≥ –ò—â—É —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...\n"
                    "üí∞ –°—Ä–∞–≤–Ω–∏–≤–∞—é —Ü–µ–Ω—ã –∏ —É—Å–ª–æ–≤–∏—è...\n\n"
                    f"üìã –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑: `{order_id}`\n"
                    "‚è≥ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞!\n\n"
                    "*–ß—Ç–æ –º—ã –¥–µ–ª–∞–µ–º:*\n"
                    "üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç\n"
                    "üîç –ò—â–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω–æ\n"
                    "üí∞ –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã\n"
                    "üìã –°–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"
                )
                back_keyboard = {
                    "inline_keyboard": [
                        [{"text": "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "callback_data": f"order_{order_id}"}],
                        [{"text": "üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", "callback_data": "search"}],
                        [{"text": "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back"}]
                    ]
                }
                send_message(chat_id, response_text, back_keyboard)
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
            elif 'text' in message:
                text = message['text']
                if not text.startswith('/'):  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    order_id = create_order(chat_id, text)
                    
                    response_text = (
                        f"üìù *–ü–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å:* {text}\n\n"
                        "üîç –ò—â—É —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...\n"
                        "üí∞ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–æ...\n"
                        "üöö –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏...\n\n"
                        f"üìã –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑: `{order_id}`\n\n"
                        "*–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:*\n"
                        "üè≠ Alibaba Supplier A - $8.90 (MOQ: 100)\n"
                        "üè≠ Made-in-China Supplier B - $9.50 (MOQ: 50)\n"
                        "üè≠ DHgate Supplier C - $12.00 (MOQ: 1)\n\n"
                        "‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: Supplier A (–ª—É—á—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ)"
                    )
                    back_keyboard = {
                        "inline_keyboard": [
                            [{"text": "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "callback_data": f"order_{order_id}"}],
                            [{"text": "üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", "callback_data": "search"}],
                            [{"text": "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back"}]
                        ]
                    }
                    send_message(chat_id, response_text, back_keyboard)
        
        return "OK", 200
        
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return "Error", 500

def answer_callback_query(callback_query_id):
    """–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query"""
    try:
        url = f"{BOT_URL}/answerCallbackQuery"
        data = {'callback_query_id': callback_query_id}
        requests.post(url, json=data, timeout=5)
    except Exception as e:
        logger.error(f"Answer callback query error: {e}")

def edit_message(chat_id, message_id, text, reply_markup=None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        url = f"{BOT_URL}/editMessageText"
        data = {
            'chat_id': chat_id,
            'message_id': message_id,
            'text': text,
            'parse_mode': 'Markdown'
        }
        if reply_markup:
            data['reply_markup'] = reply_markup
        response = requests.post(url, json=data, timeout=10)
        return response.json()
    except Exception as e:
        logger.error(f"Edit message error: {e}")
        return None

def setup_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        delete_url = f"{BOT_URL}/deleteWebhook"
        requests.post(delete_url, timeout=10)
        
        # URL –¥–ª—è PythonAnywhere - –∑–∞–º–µ–Ω–∏—Ç–µ yourusername –Ω–∞ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        webhook_url = "https://dimvi.pythonanywhere.com/webhook"
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        url = f"{BOT_URL}/setWebhook"
        data = {'url': webhook_url}
        
        response = requests.post(url, json=data, timeout=10)
        result = response.json()
        
        if result.get('ok'):
            logger.info(f"Webhook set successfully: {webhook_url}")
            return True
        else:
            logger.error(f"Webhook setup failed: {result}")
            return False
            
    except Exception as e:
        logger.error(f"Webhook setup error: {e}")
        return False

@app.route('/set_webhook')
def set_webhook_manual():
    """–†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
    if setup_webhook():
        return "Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    else:
        return "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    global BOT_TOKEN, BOT_URL
    BOT_TOKEN = '8283773658:AAFXziQDzEns0feaUNRAH45b_eFl2ynjIvY'
    if not BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN not found!")
        return False
    
    BOT_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"
    logger.info(f"Bot initialized: {BOT_TOKEN[:10]}...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets
    init_google_sheets()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    setup_webhook()
    return True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
initialize_bot()

if __name__ == '__main__':
    app.run(debug=True)
