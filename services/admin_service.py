from typing import Dict, List, Set, Optional
from datetime import datetime
from .order_management import Order, OrderStatus, OrderManagementService
from .logistics_tracking import LogisticsTrackingService

class AdminService:
    def __init__(self, order_service: OrderManagementService, logistics_service: LogisticsTrackingService, google_sheets_service=None):
        # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
        self.admin_users: Set[int] = {
            123456789,  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            987654321,  # –î–æ–±–∞–≤—å—Ç–µ ID –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ BuyerChina
            1169659218  # –í–∞—à Telegram ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }
        
        self.order_service = order_service
        self.logistics_service = logistics_service
        self.google_sheets_service = google_sheets_service
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in self.admin_users
    
    def get_google_sheets_url(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ Google Sheets —Ç–∞–±–ª–∏—Ü—É"""
        if self.google_sheets_service and self.google_sheets_service.is_connected():
            return self.google_sheets_service.get_spreadsheet_url()
        return None
    
    def get_sheets_status(self, language_service=None, user_id=None) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        if self.google_sheets_service and self.google_sheets_service.is_connected():
            if language_service and user_id:
                return language_service.get_text(user_id, 'sheets_connected')
            return "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ"
        else:
            if language_service and user_id:
                return language_service.get_text(user_id, 'sheets_disconnected')
            return "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"
    
    def add_admin(self, user_id: int) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.admin_users.add(user_id)
        return True
    
    def remove_admin(self, user_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if user_id in self.admin_users:
            self.admin_users.remove(user_id)
            return True
        return False
    
    def get_all_orders(self) -> List[Order]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        all_orders = []
        for orders in self.order_service.user_orders.values():
            for order_id in orders:
                order = self.order_service.get_order(order_id)
                if order:
                    all_orders.append(order)
        return sorted(all_orders, key=lambda x: x.created_date, reverse=True)
    
    def get_orders_by_status(self, status: OrderStatus) -> List[Order]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
        all_orders = self.get_all_orders()
        return [order for order in all_orders if order.status == status]
    
    def format_admin_dashboard(self, language_service=None, user_id=None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        all_orders = self.get_all_orders()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = {}
        for status in OrderStatus:
            status_counts[status] = len([o for o in all_orders if o.status == status])
        
        total_amount = sum(order.total_amount for order in all_orders)
        
        if language_service and user_id:
            lang = language_service.get_user_language(user_id)
            if lang == 'ru':
                message = "üë®‚Äçüíº **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ BuyerChina**\n\n"
                message += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:**\n"
                message += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(all_orders)}\n"
                message += f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç: {status_counts[OrderStatus.PENDING]}\n"
                message += f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã: {status_counts[OrderStatus.CONFIRMED]}\n"
                message += f"‚Ä¢ –í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ: {status_counts[OrderStatus.PRODUCTION]}\n"
                message += f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {status_counts[OrderStatus.SHIPPED]}\n"
                message += f"‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω—ã: {status_counts[OrderStatus.DELIVERED]}\n"
                message += f"‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω—ã: {status_counts[OrderStatus.CANCELLED]}\n\n"
                message += f"üí∞ **–û–±—â–∞—è —Å—É–º–º–∞:** ${total_amount:,.2f}\n\n"
                message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            else:
                message = "üë®‚Äçüíº **BuyerChina Admin Dashboard**\n\n"
                message += f"üìä **Order Statistics:**\n"
                message += f"‚Ä¢ Total Orders: {len(all_orders)}\n"
                message += f"‚Ä¢ Pending: {status_counts[OrderStatus.PENDING]}\n"
                message += f"‚Ä¢ Confirmed: {status_counts[OrderStatus.CONFIRMED]}\n"
                message += f"‚Ä¢ In Production: {status_counts[OrderStatus.PRODUCTION]}\n"
                message += f"‚Ä¢ Shipped: {status_counts[OrderStatus.SHIPPED]}\n"
                message += f"‚Ä¢ Delivered: {status_counts[OrderStatus.DELIVERED]}\n"
                message += f"‚Ä¢ Cancelled: {status_counts[OrderStatus.CANCELLED]}\n\n"
                message += f"üí∞ **Total Amount:** ${total_amount:,.2f}\n\n"
                message += "Select an action:"
        else:
            message = "üë®‚Äçüíº **BuyerChina Admin Dashboard**\n\n"
            message += f"üìä **Order Statistics:**\n"
            message += f"‚Ä¢ Total Orders: {len(all_orders)}\n"
            message += f"‚Ä¢ Pending: {status_counts[OrderStatus.PENDING]}\n"
            message += f"‚Ä¢ Confirmed: {status_counts[OrderStatus.CONFIRMED]}\n"
            message += f"‚Ä¢ In Production: {status_counts[OrderStatus.PRODUCTION]}\n"
            message += f"‚Ä¢ Shipped: {status_counts[OrderStatus.SHIPPED]}\n"
            message += f"‚Ä¢ Delivered: {status_counts[OrderStatus.DELIVERED]}\n"
            message += f"‚Ä¢ Cancelled: {status_counts[OrderStatus.CANCELLED]}\n\n"
            message += f"üí∞ **Total Amount:** ${total_amount:,.2f}\n\n"
            message += "Select an action:"
        
        return message
    
    def format_orders_list(self, orders: List[Order], language_service=None, user_id=None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not orders:
            if language_service and user_id:
                lang = language_service.get_user_language(user_id)
                if lang == 'ru':
                    return "üì¶ –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            return "üì¶ No orders found."
        
        if language_service and user_id:
            lang = language_service.get_user_language(user_id)
            if lang == 'ru':
                message = f"üìã **–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ ({len(orders)} —à—Ç.)**\n\n"
            else:
                message = f"üìã **Orders List ({len(orders)} total)**\n\n"
        else:
            message = f"üìã **Orders List ({len(orders)} total)**\n\n"
        
        for order in orders[:10]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10 –∑–∞–∫–∞–∑–æ–≤
            status_emoji = self.order_service._get_status_emoji(order.status)
            message += f"**{order.order_id}** {status_emoji}\n"
            message += f"üë§ User ID: {order.user_id}\n"
            message += f"üè≠ {order.supplier}\n"
            message += f"üí∞ ${order.total_amount:,.2f}\n"
            message += f"üìÖ {order.created_date.strftime('%Y-%m-%d %H:%M')}\n"
            
            if order.tracking_number:
                message += f"üì¶ {order.tracking_number}\n"
            
            message += "\n"
        
        if len(orders) > 10:
            if language_service and user_id:
                lang = language_service.get_user_language(user_id)
                if lang == 'ru':
                    message += f"... –∏ –µ—â–µ {len(orders) - 10} –∑–∞–∫–∞–∑–æ–≤"
                else:
                    message += f"... and {len(orders) - 10} more orders"
            else:
                message += f"... and {len(orders) - 10} more orders"
        
        return message
    
    def update_order_status(self, order_id: str, new_status: OrderStatus, tracking_number: str = None) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
        return self.order_service.update_order_status(order_id, new_status, tracking_number)
    
    def get_order_details(self, order_id: str) -> Optional[Order]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
        return self.order_service.get_order(order_id)
